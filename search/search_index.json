{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":""},{"location":"index.html#welcome-to-frcdesignorg","title":"Welcome to FRCDesign.org","text":"<p>The purpose of this site is to provide the knowledge and guidance necessary to learn FRC Design to a high level. This guide is heavily integrated with the DDS Discord server, so we recommend joining the server.</p> <p></p>"},{"location":"index.html#stage-roles","title":"Stage Roles","text":"<p>The discord server has different roles for each stage you are going through in the design guide. This helps the community figure out how to tailor their feedback to you and helps create a progression path. For the best experience, we recommend selecting one of the beginner stage roles to fit where you are in the journey.</p>"},{"location":"index.html#beginner-designer","title":"Beginner Designer","text":"<ul> <li>Stage 0: You have 0 design or CAD experience, and are setting up Onshape and getting introduced to CAD</li> <li>Stage 1: You have set up Onshape and have started learning sketching and part design and are working on your first projects.</li> <li>Stage 2: You have started familiarizing yourself with most of the CAD tools used for design, as well as common FRC design practices. You start to design your first mechanisms out of context and get introduced to the fundamental mechanisms.</li> <li>Stage 3: You have familiarized yourself with the program and several mechanisms and have started learning how to make efficient mastersketches and the top-down design workflow for a full robot. You start integrating everything you know into two final \"projects\" which integrate multiple concepts into a robot.</li> </ul> <p>By this point, you should have a rough understanding of the COTS ecosystems, how robots go together, and an onshape workflow, but aren\u2019t fluent.</p>"},{"location":"index.html#intermediate-designer","title":"Intermediate Designer","text":"<p>Feel free to select this if you are an intermediate designer! For veteran designers joining DDS, you probably fall under this category if you\u2019ve designed a robot or two for the season. For those going through the guide, you can \u201cgraduate\u201d to this role once you finish Stage 3. </p> <p>In this stage, you're focusing on improving your design quality, workflow, and speed through practice and design review. You'll be working on open ended projects while getting feedback on integration, design practices, and CAD quality and learning the nuances between designs to adapt to your own team.</p>"},{"location":"index.html#advanced-designer","title":"Advanced Designer","text":"<p>Through application only (or David\u2019s discretion) you can apply to get the advanced designer role. Advanced designers have mastered the Onshape workflow and/or understand FRC design to a high level. </p>"},{"location":"index.html#the-process","title":"The Process","text":"<ul> <li>Learn enough CAD basics to get started designing</li> <li>Learn FRC design fundamentals</li> <li>Practice those skills by cloning mechanisms</li> <li>Get feedback on those mechanisms</li> <li>Repeat the last two steps until you are comfortable making your own stuff.</li> </ul>"},{"location":"best-practices/index.html","title":"CAD Best Practices: Why?","text":"<p>In this guide, we document best practices for Onshape CAD and design standards for FRC. </p> <p>Reasons for these best practices include:</p> <ul> <li>Keeping loading times low</li> <li>Staying organized, so that making changes down the line is easier and more accessible</li> <li>Encouraging top-down design through document structure</li> <li>Making CAD resistant to breaking</li> </ul> <p>Why standardize design?</p> <ul> <li>Make it easier for new designers to succeed; reduce the number of things to learn</li> <li>Make it harder to make mistakes - encourage good practice through standardization</li> <li>Reduce part cost - only invest in parts that work and last</li> </ul> <p>Essentially, standardizing practices on your FRC team helps to ease the requirement of institutional knowledge by making things \"just work\".</p> <p>Note</p> <p>This is a living document.</p> <p></p>"},{"location":"best-practices/assembly-setup.html","title":"Assembly Best Practices","text":"<p>Assuming you have already named your parts and organized your work within the rest of the document, creating a well-organized assembly is very straightforward. </p>"},{"location":"best-practices/assembly-setup.html#_1","title":"Assembly Best Practices","text":""},{"location":"best-practices/assembly-setup.html#process-for-inserting-parts","title":"Process for Inserting Parts","text":"<ol> <li>Chose a method for creating an origin mate connector in your part studio</li> <li>Insert the whole part studio with the green checkbox so the origin is in the same place</li> <li>Use the \"group\" tool on all parts that don't move</li> <li>Fasten the origin mate connector to the origin</li> <li>Duplicate and fasten any duplicate parts</li> </ol> <p>This is a fast and parametric way of putting together an assembly, as opposed to using mates to constrain all the parts that were already in the correct place.</p> <p>Tip</p> <p>As you add more parts in the part studio, you can insert them individually into the assembly with the green checkmark, double click on the initial group, and add the part to the group to avoid mating it. This means that new part will always stay in the same place relative to where it was designed in the part studio.</p> <p>Make sure you sort the instances in your assembly into folders (i.e. tubes, swerve modules).</p>"},{"location":"best-practices/assembly-setup.html#the-importance-of-intelligent-origins","title":"The Importance of Intelligent Origins","text":"<p>As with many good practices in CAD, smart origins are another good practice to make future you's life easier. Intelligent origins allow designers to leverage default geometry (Front/Right/Top Planes, Origin Point) in their models. Good designers will utilize the default geometry for robust axes of symmetry and references. </p> <p>However, it should be noted that with multi-body part modeling, as opposed to a typical 1 part per file workflow in Solidworks, origins for parts are not quite as critical since there are multiple parts in a single file. For FRC CAD, the purpose of origin is two fold:</p> <ol> <li>To use the same origin point across all part studios and assemblies in order to have the same origin as the master sketch.</li> <li>To unify the robot CAD and robot software origin point. By having the same origin in CAD and code, the robot can be seamlessly exported to AdvantageScope and camera transformations more easily measured. </li> </ol> <p>Note</p> <p>Although definitions may vary from team to team, the origin of an FRC robot is typically defined as the center of the drivebase, on floor level.</p> <p>In the following sections, a few different methods for creating origins are introduced.</p>"},{"location":"best-practices/assembly-setup.html#origin-cube-method","title":"Origin Cube Method","text":"<p>The origin cube Featurescript inserts a 2\"x2\"x2\" transparent cube at the origin of the part studio. The cube has a mate connector for the origin. There is also an option to import a number of useful design constants (bolt hole sizes, common FRC dimensions, etc).</p> <p>Compared to other methods like fixing components, the origin cube is a more robust and parametric method of aligning origins.</p> <p>In each sub assembly, the cube is mated to the origin. Then, in the top level robot assembly, all the origin cubes are mated together to create the final robot assembly.</p> <p>Link to Featurescript</p> <p> Inserting the Origin Cube feature. </p>"},{"location":"best-practices/assembly-setup.html#utilizing-origin-cube-for-flexible-assemblies","title":"Utilizing Origin Cube for Flexible Assemblies","text":"<p>To utilize the full potential of origin cubes and master sketches, it is recommended to have separate sub assemblies for the stationary group of components and the moving group of components of each mechanism. A single part studio or multiple part studios can be used to achieve this, it is up to the personal preference of the designer.</p> <p>Take a slap down intake for example. In this example, two part studios that reference the same master sketches are used: one for the arm base and gearboxes, and one for the intake arm. The following three assemblies are then formed: the base components assembly, the arm components assembly, and the top level intake assembly containing the first two sub assemblies. The base component assembly and arm component assembly are both rigid assemblies with their respective origin cubes mated to their assembly origins. A rigid assembly is one where there are no moving components. The top level intake assembly should then only include two mates: a fasten to mate the origin cube of the base assembly to the origin, and a revolute mate to enable the motion of the arm.</p> <p>The full file tree of this example will appear like so:</p> <ul> <li>Top Assembly: Intake</li> <li>Assembly: Intake Base</li> <li>Part Studio: Intake Base</li> <li>Assembly: Intake Arm</li> <li>Part Studio: Intake Arm</li> </ul> <p>If only a single part studio is used, then there would be a single intake part studio:</p> <ul> <li>Top Assembly: Intake</li> <li>Assembly: Intake Base</li> <li>Assembly: Intake Arm</li> <li>Part Studio: Intake</li> </ul> Images of example assembly Top Level Assembly: 0200-A-Intake. Notice that there is only two mates. The revolute is between the two intake pivot mate connectors, which are attached to the repective origin cubes. Stationary Components Assembly: 0210-A-Intake Base. The components are group mated and the origin cube is fastened to the origin. Stationary Components PS: 0210-A-Intake Base. Notice the intake pivot mate connector, derived from the orange master sketch.  Moving Components Assembly: 0220-A-Intake Arm. The components are group mated and the origin cube is fastened to the origin. Moving Components PS: 0220-Intake Arm. Notice the intake pivot mate connector, derived from the orange master sketch. <p>In order to create a more robust revolute mate for the pivot, start by creating a mate connector in both part studios at the pivot point and attaching it to the origin cube. Then, in the top level assembly, add a revolute mate between the two origin cube's pivot mate connector and optionally set angle limits. By referencing the master sketch for the pivot point, the mate becomes parametric to any changes in either part studio. In fact, there would not need to be any parts in either assembly for the pivot to work because the mate connectors are attached to the origin cubes.</p> <p>Again, the separation of the stationary components and moving components into two part studios for this example is purely personal preference. The key takeaway is that the parts need to be inserted into separate sub assemblies. A simple example of both methods is given in the Origin Cube Featurescript document.</p> <p>This same method can also work for any type of flexible mechanism including elevators and linkages.</p>"},{"location":"best-practices/assembly-setup.html#origin-mate-connector-method","title":"Origin Mate Connector Method","text":"<p>WIP</p>"},{"location":"best-practices/assembly-setup.html#other-best-practices","title":"Other Best Practices","text":""},{"location":"best-practices/assembly-setup.html#simplified-models","title":"Simplified Models","text":"<p>The first advice is to minimize primitives in your assembly. Primitives are kinda like the number of triangles used to render the mesh of the object, or in more simple terms, it's a measure of how complex the object is and how hard it is for Onshape to render. The more primitives there are, the more laggy your assembly will be.</p> <p>Use simplified models wherever possible to minimize primitives: electronics, swerve modules, motors, etc. Some of these are added to MKCAD as well.</p> Minimize Primitives <p> </p> <p>Other things to keep in mind:</p> <ul> <li>Import COTS parts from MKCAD</li> <li>Use the replicate tool for adding hardware! You should only need toimport one of each type</li> <li>Minimize the number of mates you use; this lowers the solve time</li> <li>Stay organized with folders</li> </ul> <p>See a well-organized assembly here: </p> <p></p> <p></p>"},{"location":"best-practices/document-setup.html","title":"Document Setup","text":"<p>In General, an FRC robot is too complicated and has too many parts to be created entirely within a single document. Doing so is possible, but will result in bad loading times, and likely poor organization. </p> <p>To alleviate these challenges, we generally split FRC robots into several documents, each with an individual version number:</p> <ul> <li>\"Concept\" document: contains the mastersketch, which determines the overall architrcture and geometry for the robot, alongside the Crayon CAD (a simplistic model of your robot archetype)</li> <li>Several \"Subsystem\" documents, which contain the part studios, subassemblies and top-level assembly for each subsystem, such as an Intake</li> <li>\"Master Robot\" document, which contains the top-level full robot assembly. This assembly is comprised of the top-level assembly from each of the subsystem documents.</li> </ul> <p>To connect these documents to each other, we make use of a few key Onshape features:</p> <ul> <li>Derive feature: brings your mastersketch from the concept document into the subsystem document, so you can design your parts on top of it.</li> <li>Import: Subassemblies are imported from each subsystem document so they can be assembled in the master robot document.</li> </ul> <p>Here is a diagram showing the full file structure:</p> <p></p> <p> Blue: Derive, Red: Import </p> <p>Note</p> <p>Sometimes the \"master robot\" document is combined with the \"concept\" document. In this case nothing really changes, the file structure just becomes a sort of loop, and there is one less document.</p> <p>You can see an example of this document structure here. Note the combination of the framework and master documents.</p> <p></p> <p></p> <p>The document structure isn't set in stone; as long as it helps your team fulfill the goal of top-down design and uses separate documents to split up the versions of mechanisms, you can place your master sketches wherever you want (master document, concept document, or the drivetrain document).</p> <p></p>"},{"location":"best-practices/feature-tree-setup.html","title":"Feature Tree Best Practices","text":"<p>In general, every part studio feature tree should start with a derive command, pulling down the relevant mastersketch. This is what you will build on. </p> <p>When modeling within the part studio, just remember to avoid duplicating parts and deriving COTS parts, as stated above. Duplicating parts, using many derive commands or overusing heavy featurescripts, such as the tube converter, can make your part studio loading times extremely high.</p> <p>Sorting and naming your features can be a good idea, especially to make your CAD more understandable for someone who wasn't there when you did it.</p> <p>On that note, naming your parts according to a convention is extremely beneficial down the line.</p> <p>See an example of a well-organized part studio here:</p> <p></p> <p></p>"},{"location":"best-practices/mastersketch-setup.html","title":"Master Sketch Best Practices","text":"<p>Mastersketches (layout sketches) drive the core geometry of the entire robot.</p> <p>Think:</p> <ul> <li>Drivebase dimensions</li> <li>Bumper height</li> <li>End-effector wheel locations based off of prototyping</li> <li>Intake wheel locations</li> <li>Basic serializer geometry</li> </ul> <p>NOT:</p> <ul> <li>Specific details like the shape of plates</li> <li>Motor mounting locations</li> </ul> <p>Effective mastersketching requires you to stay organized. This means:</p> <ul> <li>Multiple sketches, usually one per subsystem, within the mastersketches part studio. Keep everything separate!</li> <li>Name your sketches accordingly</li> <li>Start with the drivetrain, then extension limits, then field elements to build off on</li> <li>Sketch all the possible states of each moving subsystem </li> </ul> <p>In general, mastersketching is an art that can require some practice to get the hang of. This tutorial can help you get started if you are unsure.</p> <p>See an example of a well set-up mastersketches part studio here:</p> <p></p> <p>And a presentation of an example: 8177 Vector 2023 Robot</p> <p></p>"},{"location":"best-practices/sub-document-setup.html","title":"Sub-Document Setup","text":"<p>Within each document, you should have a part studio and assembly attached to it. The part studio should contain all parts that need to be manufactured by your team. This could include fully custom plates, shafts cut to length, modified COTs parts, etc. However, unmodified COTs parts should be imported directly into the corresponding assembly - no modification inside the part studio is required.</p> <p>Important</p> <p>Never pattern or mirror parts in part studios that don't explicitly need to be patterned. Creating one of each part in the studio means you can simply duplicate it when assembling, and your part studio regeneration time will be greatly improved at no cost.</p> <p>Often, you only need to have one part studio and one top-level subsystem assembly, although depending on the complexity of the subsystem you may want to split into multiple. For example, you could split an elevator document into one part studio and corresponding assembly for each stage. The top-level elevator assembly would thus include each of the stage subassemblies within it.</p> <p>Note how there's only 1 part studio and 1 assembly for this subsystem, as the part count is relatively low.</p> <p></p> <p>Note how a subassembly is used to assemble several parts that can then be imported as a single item in the top-level subsystem assembly.</p> <p></p> <p></p>"},{"location":"contribution/contributors.html","title":"Contributors","text":"<p>FRCDesign.org would not happen without the wonderful work of these people!</p>"},{"location":"contribution/contributors.html#manual-writers","title":"Manual Writers","text":"<ul> <li>David</li> <li>Kelly</li> <li>Astro</li> <li>Andrew Card</li> <li>Kremer</li> <li>Eeshwar </li> <li>Neel </li> <li>Brendan </li> <li>Vaughn</li> <li>Jonathan Mi</li> </ul>"},{"location":"contribution/contributors.html#additional-input","title":"Additional Input","text":"<ul> <li>Nick Aarestad</li> <li>Trisha</li> <li>Chickenbonker</li> <li>Andrew Torrance</li> <li>Lati</li> <li>Jeremy</li> <li>Sarah</li> </ul>"},{"location":"contribution/methodsOfContributing.html","title":"Methods of Contributing","text":""},{"location":"contribution/methodsOfContributing.html#public-contribution","title":"Public Contribution","text":"<p>Anyone can create content for the website without markdown knowledge or github, though it is preferred you learn how to use both to lessen the workload of other contributors.</p> <p>In the discord server, go to the \"website-feedback\" channel and ask if you can contribute the thing you want to by filling out this template:</p> <pre><code>Issue/content:\nSolution or Notes about the execution of the content:\nWhen do you plan on finishing?:\nUsing an alternate platform or forking on Github?:\n</code></pre> <p>This is to make sure you don't waste your time if it's not something that won't get put on the website or something that someone has already started working on.</p> <p>If you're given approval to start working on it, an internal contributor will make a new post in the \"public-website-contribution\" forum channel or direct you an existing post to work with and supplement another contributor if the content or issue has already started to be addressed.</p> <p>When you start on your work, you may choose to either:</p> <ol> <li>Fork the repository on Github and submit pull requests for your work to be accepted (if you're more programming-savvy)</li> <li>Work on an alternate platform such as Google Docs or Notion and let an internal contributor port it over to the website when you're done</li> </ol>"},{"location":"contribution/methodsOfContributing.html#setting-up-github-and-vs-code-for-contributing","title":"Setting up Github and VS Code For Contributing","text":""},{"location":"contribution/methodsOfContributing.html#install-prerequisites","title":"Install Prerequisites","text":"<p>Make sure to download the correct versions for the OS that you have (Windows, Mac, or Linux).</p> <p>Windows installers will almost always need to be the 64-bit version if there is a distinction.</p> <ul> <li>The latest version of Git Bash<ul> <li>Follow instructions for your OS</li> <li>Use all default options for installation</li> </ul> </li> <li>Python 3.10.6 <ul> <li>When the installer opens, make sure to select \"Add Python 3.10 to PATH\" at the bottom and click \"Install Now\"</li> <li>For Windows users, you have the option of disabling the PATH length limit at the end; this can be helpful for other projects but is not required for contributing to the website</li> </ul> </li> <li>VSCode<ul> <li>Download the stable build for your OS</li> <li>Use all default options for installation, except creating a desktop icon if you want</li> </ul> </li> <li>GitHub Desktop<ul> <li>After installing, select \"Sign in to GitHub.com\"</li> <li>Sign in or sign up for a new GitHub account, then click \"Authorize Desktop\"<ul> <li>If you choose to sign up, you must verify your account with a captcha at the end of the registration and an emailed code</li> <li>If the captcha fails, try disabling a privacy extension that might be interfering</li> <li>Set up the rest of your account (you may choose to sign up for GitHub education but that isn't required, the free version is fine)</li> <li>If it doesn't take you to the authorization page after signing up, go back to the GitHub Desktop application, press \"Cancel\", the select \"Sign in to GitHub.com\" again</li> </ul> </li> <li>Allow your browser to open GitHub Desktop</li> <li>Click \"Finish\"</li> </ul> </li> </ul>"},{"location":"contribution/methodsOfContributing.html#steps-to-start-writing-contributions","title":"Steps to Start Writing Contributions","text":"<p>For Public Contributors:</p> <ol> <li>Go to the repository website</li> <li>Click \"Fork\" near the top right, then click \"Create Fork\" on the next screen</li> <li>Open GitHub Desktop and select \"Clone a repository from the Internet...\" or go to <code>file -&gt; Clone repository...</code> in the very top left</li> <li>Under \"GitHub.com\", select your forked <code>[username]/dds-manual</code> repository  and click \"Clone\"</li> <li>After it clones the repository (downloads a copy of it to your computer), it will ask how you plan to use the fork. Select \"To contribute to the parent project\" and click \"Continue\"</li> </ol> <p>For Internal Contributors (added to the main repository):</p> <ol> <li>Open GitHub Desktop and select \"Clone a repository from the Internet...\" or go to <code>file -&gt; Clone repository...</code> in the very top left</li> <li>Under \"GitHub.com\", select the <code>davidsdesignserver/dds-manual</code> repository and click \"Clone\"</li> <li>After it clones the repository (downloads a copy of it to your computer), it will ask how you plan to use the fork. Select \"To contribute to the parent project\" and click \"Continue\"</li> </ol> <p>How to Write and Pull Request Contributions</p> <ol> <li>Create a new branch by going to the \"Current branch\" dropdown at the top of GitHub Desktop, pressing \"New branch\", naming it and clicking \"Create branch\".<ul> <li>Typically you want to make changes in branches (not main), then do what's called a \"pull request\" to get those changes \"pulled\" and merged over to the original main branch</li> <li>Name the branch something related to the overall changes you're making, e.g. \"contributors-guide\" or \"3A-cleanup\". You should expect to delete the branch after a pull request, so keep it specific enough to your changes</li> <li>Make sure to publish the branch by clicking the button for it that shows up after you create a new branch</li> </ul> </li> <li>Click \"Open in Visual Studio Code\" to open VS Code.</li> <li>If you get a pop-up that says \"Do you trust the authors of the files in this folder?\", check the box next to \"Trust the authors of all files in the parent folder 'GitHub'\" (for no further popups when you clone repositories in the future) and click \"Yes, I trust the authors\".</li> <li>Set up VS Code how you like if this is your first time running it (themes, extensions).<ul> <li>The \"Code Spell Checker\" extension is suggested</li> <li>Enable autosave in the <code>file</code> menu by toggling it on</li> </ul> </li> <li> <p>Make a set of changes.</p> <p>Tip</p> <p>All the website files and folders are contained in the <code>docs</code> folder, except the <code>mkdocs.yml</code> file which contains the directory for the sidebar of the website</p> </li> <li> <p>Whenever you reach a good point to stop where you want to save your changes to the cloud, you want to make what's called a \"commit\", which is where the changes are saved to the branch. You then have to \"push\" any commits to get them uploaded to the cloud, otherwise they will remain local. You can do this through VS Code or GitHub Desktop, but we'll go through GitHub Desktop to keep all version control actions centralized there.</p> </li> <li>Open Github Desktop and make sure \"Changes\" on the sidebar is selected. All changes selected in the sidebar will be added to the commit (the changes are \"staged\" for the commit). Type a summary of the commit (description optional) and press \"Commit to [branch]\".</li> <li> <p>Click the button to push the commit(s) you've made to the cloud (either up above or in the middle of the screen).</p> <p>Tip</p> <p>Clicking the \"Fetch origin\" button will fetch any commits to the current branch that anyone else has made and pushed to the cloud</p> </li> <li> <p>To keep your code up to date with the original repository's main branch, open the \"branch\" menu at the top of the screen and click \"Update from main\". If some commits get pulled to your branch from main, you can push to update your branch in the cloud again.</p> <p>Tip</p> <p>Make sure to update your branch from main frequently! If you don't, you may have to resolve big conflicts between your changes and changes someone else made to main. If you encounter conflicts, just follow the prompts in GitHub Desktop to open the conflicts in VS Code and solve them there. Once all conflicts are resolved, switch back to GitHub Desktop to complete the merge.</p> </li> <li> <p>Once you're satisfied enough with your set of changes to request to add them to the main website, and have committed all changes, checked for updates, and pushed all commits, create a pull request through the menu in the middle of GitHub Desktop. This will bring you to the website where you can describe the changes you made and want to pull to the website and assign an issue that it will fix. One of the internal contributors will review your pull request after you submit it and will either approve it and merge it with the main branch or make comments about things that need fixed before it can get merged.</p> </li> </ol> <p>To recap the contribution steps, do the combination of creating and publishing a branch, making changes and commits, updating from main, pushing commits, and creating a pull request.</p>"},{"location":"contribution/methodsOfContributing.html#how-to-get-the-local-preview-of-the-website-running","title":"How to Get The Local Preview of the Website Running","text":"<p>You can get a local hosted version of the website to have a live preview of the site while editing.</p> <ol> <li>Open the repository in VS Code (doesn't matter which branch)</li> <li>Toggle the bottom panel on if there isn't one with the shortcut <code>Ctrl + J</code></li> <li>Click the dropdown next to the + on the top righthand side of the bottom panel and click \"Git Bash\"</li> <li>Run the command <code>py -m venv venv</code> to create a virtual environment</li> <li>Run the command <code>./runlocal.sh</code> to install all needed python packages and start the server</li> <li>If everything went smoothly it should say its \"Serving on\" something like <code>http://127.0.0.1:8000</code></li> </ol> <p>Make sure to run <code>./runlocal.sh</code> in Git Bash every time you open VS Code to edit.</p> <p>Tip</p> <p>After clicking on the terminal in the bottom panel, you can use Ctrl + C to terminate the local website hosting.</p> <p>Note</p> <p>When you switch branches using GitHub Desktop, the local preview will follow without any problems</p>"},{"location":"contribution/styleguide.html","title":"Style Guide","text":"<p>Kindly borrowed and modified with permission from the gm0 style guide</p> <p>Don\u2019t deal in absolutes.</p> <ul> <li>Only a Sith deals in absolutes</li> <li>Use pros/cons lists to compare options</li> <li>Explain WHY something is good or bad</li> <li>For example, we all know deadaxle pivots are better than liveaxle. But don\u2019t just say they\u2019re better, say: \"Deadaxles have a higher second moment of area as the torque being directly transferred to the part. As a result your pivot is significantly more robust and less prone to breaking. \u201d</li> <li>Similarly, we know the Kraken motors are generally good. But explain why they are good, e.g. \u201cWe would recommend using Krakens on your drivetrain because they are extremely high torque motors and will improve your acceleration. In addition, they have integrated Talon FX motor controllers that make them easier to wire and feature a high resolution encoder which will help the precision of your swerve odometry. Keep in mind that Kraken motors are not yet compatible with stock REV Maxswerve modules and require an extra adaptor from WCP to mate with other existing modules.\u201d</li> <li>Still emphasize that teams are free to explore and innovate, but help set realistic expectations (see the following point)</li> </ul> <p>FRCDesign.org is a guide from a competitive standpoint. - Try to leave out stuff that doesn\u2019t work well and is unpopular; if it is popular it is worth explaining the disadvantages (See tank drive vs mecanum drive; explaining tank drive, as a relatively popular and simple drivetrain makes sense, but mecanum drive, a drivetrain that no longer makes sense in the era of swerve and has little-to-no pushing power or traction.) - Try to leave opinions out as much as possible. Do not speak authoritatively on stuff you do not have first-hand experience with whenever possible</p> <p>Keep in mind that FRC design trends are temporary and transient. - Just because something is popular one season doesn\u2019t mean it\u2019s the end all be all. There was a time when WCD and sheet metal superstructures was all the rage, but that doesn\u2019t mean that we should recommend them in this guide. Try your best to think about why something is popular, and what benefits in design, function, and execution they actually bring to the table.</p>"},{"location":"contribution/styleguide.html#file-formats","title":"File Formats:","text":"<ul> <li>Compress images to .webp format using squoosh</li> <li>Embed longer videos using a Youtube upload, and shorter videos with a webm file</li> <li>Add images by using <code>&lt;center&gt;&lt;img src=\"absolute link\" width=\"x%\"&gt;&lt;/center&gt;</code></li> </ul>"},{"location":"contribution/styleguide.html#brand-standards","title":"Brand Standards","text":"<p>Adhere to brand standards when possible.</p> <ul> <li>Abide by FIRST\u00ae Trademark guidelines, available here</li> <li>The first instance of FIRST and FRC on a page should include \u00ae (i.e, FIRST\u00ae)</li> <li>Always capitalize and italize the name FIRST</li> <li>Do NOT use a possessive on the FIRST name (e.g, FIRST\u2019s)</li> </ul> <ul> <li>This also applies to team names: spell them how they are officially spelled</li> <li>Check The Blue Alliance if you don't know how to spell a team's name</li> </ul> <p>You can use \u201cyou\u201d when writing, when it makes writing less awkward. However, try avoiding excessively using it.</p>"},{"location":"contribution/styleguide.html#thanks-to-gm0-for-the-style-guide-reference","title":"Thanks to GM0 for the style guide reference","text":""},{"location":"design-challenge/index.html","title":"Design Challenges","text":"<p>Design Challenges are at the core of what makes DDS Special. Design Challenges provide a variety of different practice scenarios to iron your design skills and compete against others in a mutually beneficial way.</p>"},{"location":"design-challenge/index.html#scoring","title":"Scoring","text":"<p>Each Design Challenge will net a total of 7 points maximum, with 4 for completion and 3 possible bonuses. Late submissions will allow participants to win up to 2 completion points and all 3 bonus points. </p>"},{"location":"design-challenge/index.html#bonuses","title":"Bonuses","text":"<ul> <li>Simplicity bonus: Awarded to submissions that simplify design to increase the quality of life of their team. </li> <li>Quality bonus: Awarded to submissions that embody good CAD and design principles and reflect the time and effort put into making a design as clean as possible.</li> <li>Special bonus: Bonus point specific to each design challenge, usually involving the way the challenge is approached and the design is executed. </li> </ul>"},{"location":"design-challenge/index.html#leaderboards","title":"Leaderboards","text":"<p>Design challenges will feature two separate leaderboards: Beginner and Intermediate/Advanced. Each leaderboard will function independently, but points will be transferred when beginner members gain experience and self identify as intermediate. Please correctly self identify with your skill level! DDS is meant to be a community for learning, and trying to game the system by identifying as a beginner only discourages others. We operate on an honor system, but if someone is trying to game the system, we will punish them accordingly. </p>"},{"location":"design-challenge/challenges/week1.html","title":"Design Challenge #1: Swerve Drivebase","text":"<p>Welcome to the first design challenge! We are going to start with a swerve drivebase, the foundation of your robot. We have two different levels of challenges, beginner and advanced. It is recommended to complete the beginner challenge first before going on to the advanced version. The advanced version is the same as the beginner challenge, with a few additional things added on.</p> <p>Warning</p> <p>The deadline for this design challenge is 11:59pm PST 05/04/24, any submissions after this deadline are subjected to late submission scoring outlined here</p> Beginner ChallengeAdvanced Challenge <ul> <li>You need to choose a COTS swerve module</li> <li>It needs to be assembled using 2\" x 1\" aluminum tubes</li> <li>You need to add a bellypan</li> <li>The drivebase needs to be legal to be used on the field. </li> </ul> <ul> <li>Lay out and add mounting holes for all of the electronics, making sure to leave space for wires</li> <li>Add in the electronics models and mate everything together</li> <li>Add in and secure the battery in some way</li> <li>Add bumpers </li> <li>Add bumper mounts</li> </ul> <p>Need Help?</p> <p>If you are stuck, or have any questions, feel free to ask in the discord server! Same goes with getting your design looked over!</p> <p>Feel free to check out drivebase examples here if you need some brainstorming.</p> <p>Good luck with your first challenge! </p> One example of a drivebase! There are many different ways to make one, so don't let this one example drive your design! Be creative and let your mind go wild."},{"location":"design-challenge/challenges/week2.html","title":"Design Challenge #2: Gearboxes","text":"<p>This week we will be designing a custom gearbox. Custom gearboxes can be used for many applications, from pivots for intakes or arms, to elevators, and much more. They are useful in certain applications due to their cheap cost and low backlash, as well as being highly customizable to different packaging situations. It is important for any well rounded designer to know their way around a custom gearbox.</p> <p>Warning</p> <p>The deadline for this design challenge is 11:59pm PST 05/28/24, any submissions after this deadline are subjected to late submission scoring outlined here</p> Beginner ChallengeAdvanced Challenge <p>Beginner Challenge: The year is 2019, and COTS swerve isn\u2019t a thing yet (unless you want to run andymark swerve and steer\u2026). Your team is designing a custom WCD, and needs gearboxes to drive it! </p> <ul> <li>Requirements:<ul> <li>Create a 2 stage gearbox with a total reduction of ~6:1</li> <li>Gearbox must fit within the space requirements as outlined</li> <li>Gearbox may use any motors of your choice, minimum of 2 maximum of 3</li> </ul> </li> </ul> <p>Beginner Document Template</p> <p>Advanced Challenge: Welcome back to Charged Up 2023! Some of you may be (too) familiar with this game, others may have never heard of it. It\u2019s the end of week 1 and your team has just finished deciding a robot archetype: double jointed arm. It\u2019s now your job to design that arm- without using COTS gearboxes. No planetaries, no wcp gearboxes, just your own skill to make a great double jointed arm.</p> <ul> <li>Requirements:<ul> <li>Based on your team\u2019s end effector design, the end of the arm (where a wrist might be) must be able to reach the 3 setpoints in the outline document.</li> <li>The arm must stow within the frame perimeter, with at least 5 inches of clearance from the edge.</li> <li>No electronics will be required, other than motors. </li> <li>Drivetrain details will not be looked at. </li> <li>No COTS gearboxes</li> <li>Proper master sketch. </li> </ul> </li> </ul> <p>Advanced Document Template</p> <p>Need Help?</p> <p>If you are stuck, or have any questions, feel free to ask in the discord server! Same goes with getting your design looked over!</p> <p>Good luck!</p>"},{"location":"design-fundamentals/index.html","title":"Design Fundamentals","text":"<p>This category includes fundamentals about engineering design in FRC, deep dives into various common mechanisms, and write-ups on other various design topics. This content is separate from CAD and is meant to be applicable no matter the software used. </p> <p>Keep in mind that this category is a large work in progress, and will continue to be added to long after the design guide is finished. Feel free to write your own content for something we don't have yet and we'll try to incorporate it into the website (follow the contribution guide.)</p>"},{"location":"design-fundamentals/index.html#structure","title":"Structure","text":"<p>This section is all about robustness and designing with fabrication in mind. This means materials, types of structure, hardware, tolerances, tools and machines, etc.</p> <p>(WIP) Materials: Different types of common materials in FRC and how to use them best, as well as a guide on lightening.</p> <p>(Not Started) Structure: How to use materials in different forms and various COTS pieces to create a robust and versatile structure system.</p> <p>(WIP) Hardware: A guide on hardware and hardware standards common in FRC, including best use cases and what to keep in mind when designing a robot in relation to hardware.</p>"},{"location":"design-fundamentals/index.html#power-transmission","title":"Power Transmission","text":"<p>This section is all about the transmission of power to enable different kinds of actions, whether that's a pivot that needs only two positions or a whole range, spinning things to bring a game piece in, or deploying a mechanism</p> <p>(Not Started) Electronics, Motors, and Sensors: A guide on how to design space for electronics, the differences between commonly used motors in FRC, and sensors that can be used to increase the controllability of a robot.</p> <p>(Not Started) Pneumatics: An overview of how pneumatic systems work, the components required for one, and potential tradeoffs and use cases for pneumatics on a robot.</p> <p>(WIP) Transfer of Rotational Motion: The basics of mechanical advantage, the transfer of torque and speed, and the differences and use for gears, belts, and chain.</p> <p>(Not Started) Motion Components: A rundown of bearings, bushings, axles, and the best use cases for them, including the mechanics behind transmission of torque through axles.</p> <p>(Not Started) Wheels and Rollers: Various wheels sold, their mechanical properties, and various use cases for them. Also a guide to different rollers. Useful for manipulation of a game piece.</p> <p>(Not Started) Linear Extension: Covers various linear extension systems such as worm gears and rack and pinion.</p>"},{"location":"design-fundamentals/index.html#mechanisms","title":"Mechanisms","text":"<p>Drivetrain: A guide on drivetrains, drivebase rigidity, wheelbase location, and electrical mounting.</p> <p>(Not Started) Elevators: A guide on elevators, including different types of rigging, COTS parts, gearboxes, and use cases.</p> <p>More mechanisms coming eventually</p>"},{"location":"design-fundamentals/index.html#design-write-ups","title":"Design Write-ups","text":"<p>Write-ups on important topics for FRC design that aren't necessarily fundamentals but can take your design a step further.</p> <p>(Not Started) Designing for Controllability: This page is about making your mechanisms and power transmission as easy to control as possible, including various ways to reduce backlash in systems.</p> <p>(Not Started) Chain Tensioning Solutions: A number of different innovative ways to tension a chain to reduce backlash in a mechanism in a compact way.</p> <p>(Not Started) Bumper Mounting Solutions: An overview of different bumper mounting solutions implemented by different teams or sold by different companies.</p> <p>(Not Started) Springs and Shocks: Different forms of tension that can be used to lessen the load on structure or motors and how to use them.</p> <p>(Not Started) Linkages: An overview of mechanical linkages and different use cases for them in robots.</p> <p></p>"},{"location":"design-fundamentals/design-writeups/DFC.html","title":"Designing for Controllability","text":"<p>This page is about making your mechanisms and power transmission as easy to control as possible, including various ways to reduce backlash in systems.</p> <p>Coming Soon</p> <p></p>"},{"location":"design-fundamentals/design-writeups/bumperMounting.html","title":"Bumper Mounting Solutions","text":"<p>An overview of different bumper mounting solutions implemented by different teams or sold by different companies.</p> <p>Coming Soon</p> <p></p>"},{"location":"design-fundamentals/design-writeups/chainTensioning.html","title":"Chain Tensioning Solutions","text":"<p>A number of different innovative ways to tension a chain to reduce backlash in a mechanism in a compact way.</p> <p>Coming Soon</p> <p></p>"},{"location":"design-fundamentals/design-writeups/linkages.html","title":"Linkages","text":"<p>An overview of mechanical linkages and different use cases for them in robots.</p> <p>Coming Soon</p> <p></p>"},{"location":"design-fundamentals/design-writeups/springs-shocks.html","title":"Springs and Shocks","text":"<p>Different forms of tension that can be used to lessen the load on structure or motors and how to use them.</p> <p>Coming Soon</p> <p></p>"},{"location":"design-fundamentals/mechanisms/drivetrain.html","title":"Drivetrain","text":""},{"location":"design-fundamentals/mechanisms/drivetrain.html#drivebase-fundamentals","title":"Drivebase Fundamentals","text":""},{"location":"design-fundamentals/mechanisms/drivetrain.html#types-of-drivetrains","title":"Types of Drivetrains","text":"<ul> <li>Swerve - A drivetrain with 4 wheels in which all drive wheels are independently driven and steered. Drivetrain can move in any direction</li> </ul> <ul> <li>Kit of Part drivebase - 6 wheel drop center(the middle wheels is lower than the outer wheels) drive base made from bent-sheet metal and comes with the kit of parts. </li> </ul> <ul> <li>West Coast Drive (WCD) - A six wheel drive base with a drop-center wheel that is directly driven from the gearbox. Traditionally, the power transmission is driven with chain, a gearbox, and box tubing for rigidity. A key characteristic for west coast drives is that the wheels are cantilevered. </li> </ul>"},{"location":"design-fundamentals/mechanisms/drivetrain.html#key-drivebase-choices","title":"Key Drivebase Choices","text":"<p>Rigidity</p> <p>In a single FRC game, robots encounter huge forces from collisions, and a rigid frame helps to reduce the risk of any structural damage. In your drivebase, you want to add something to increase the rigidity, such as a cross rail. When building a superstructure, you need to think from the bottom up, and it starts with your drivetrain being as rigid as possible.</p> <p>What do cross members do for your structure?</p> <ul> <li>Contrary to popular belief, metal isn\u2019t as strong as stable as people think, and it likes to \u201cparallelogram\u201d when compressive loads begin to come on your bracing.</li> </ul>  In this picture you can see the square frame turns into a parallelogram as a load comes onto the left side. In a single FRC match, your chassis undergoes a ton of forces, which can affect the shape of your drivebase.  <p>Where to place cross rails?</p> <ul> <li> <p>There are two main type of cross members that teams do:</p> <ul> <li>The first type is two vertical cross members, as close to the swerve modules as possible.  </li> <li>Pros:<ul> <li>Easier to mount things</li> <li>Stiff structure, less change of compressive loads affecting your drivebase.</li> </ul> </li> <li> <p>Cons:</p> <ul> <li>You severely limit your electrical boards accessibility, and it affects the placement of your electronics.</li> </ul> </li> <li> <p>The second type is a single 2x2 Horizontal Cross beam.  </p> </li> <li>Pros:<ul> <li>Opens up a ton of electrical board space</li> <li>Stronger than having a single 2x1 there because of your cross sectional area, and it can withstand higher loads before yielding or failing. </li> <li>Moment of inertia is double, due to the width being double meaning there's a much larger increase in strength.</li> <li>2x2 box tubing spreads the shear-load across a larger area</li> <li>Stiffness of 2x2 is nicer.</li> </ul> </li> <li>Cons: <ul> <li>Harder to mount your superstructure from there, you might have to introduce additional tubes.<ul> <li>This could mean that you have to potentially introduce complex bent-metal parts</li> </ul> </li> <li>Severely locks you into a mounting style.</li> </ul> </li> </ul> </li> </ul> <p>Which tube thickness should you use?</p> <ul> <li>In a majority of drivebases, people use 2x1 Box tubing that is 1/8th thickness. <ul> <li>Generally, the thinner the wall thickness, the more susceptible it is to tearing, as well as crushing. In matches with heavy impacts, your drivebase tubes are the last thing you want bending: <ul> <li>1/8\" wall thickness is best in scenarios where you know that you will have impacts, or in areas where you know that stress concentration will have to be high according to how it is fixtured or assembled.</li> </ul> </li> </ul> </li> </ul> <p>Bellypans and their impact on rigidity</p> <ul> <li>A belly pan is a plate for mounting electronics on the underside of your drivebase, however it also tremendously impacts the rigidity of your drivebase as it acts like a giant gusset bringing everything together </li> <li>By spanning the underside of the drivebase and connecting to the key structural elements like the frame rails/cross-members, the belly pan is able to distribute loads evenly across the entire structure and the integration helps to prevent any flexing or deformation of the frame. </li> </ul> <p>What material should my bellypan be?</p> <ul> <li>By increasing the thickness of your belly pan, and changing the material, you can drastically change the center of gravity of your robot. </li> <li>Popular Material Types:<ul> <li>Steel:<ul> <li>Pros:<ul> <li>Low center of gravity</li> <li>High strength</li> </ul> </li> <li>Cons:<ul> <li>Heavy weight means you may need to lighten other parts of your robot to be under the weight limit. (See team 254's robot in 2022 when they used a 1/4\" Steel Bellypan and compensated by lightening all their other parts)</li> <li>Hard to machine</li> </ul> </li> </ul> </li> <li>Aluminum:<ul> <li>Pros:<ul> <li>Easy to machine</li> <li>Relatively high strength</li> <li>Lighter weight than steel</li> </ul> </li> <li>Cons:<ul> <li>Aluminum is expensive.</li> </ul> </li> </ul> </li> <li>Polycarbonate:<ul> <li>Pros: <ul> <li>Lightweight, meaning that you are able to allocate more weight to other parts of the robot. </li> <li>Relatively cost-effective</li> <li>Very simple to machine.</li> </ul> </li> <li>Cons:<ul> <li>Lower rigidity and can flex</li> <li>Lower weight means that your center of gravity could be higher than you want it to be.</li> </ul> </li> </ul> </li> </ul> </li> <li>What a lot of teams do to maintain rigidity while lightening the weight is called a pocketed bellypan , and what this accomplishes is it takes away the material in unnecessary places, while allowing for electronics to  be mounted by keeping the holes in the correct locations.</li> </ul>"},{"location":"design-fundamentals/mechanisms/drivetrain.html#frame-perimeter","title":"Frame Perimeter","text":"<ul> <li>In accordance with the game manual, your drivebase frame perimeter must be a maximum of 120\". <ul> <li>Frame Extension: <ul> <li>In accordance to the game manual, at the beginning of your match, no part of your robot can stick out of the frame. To gain more clearance teams use Swerve-Corners and 1/4\u201d plates to extend their frame perimeter by a 1/2\u201d on all sides, and this allows to mount plates to the edges of your tubing.</li> </ul> </li> </ul> </li> </ul> You can see in the highlighted section that it sticks out further than your box tubing extension."},{"location":"design-fundamentals/mechanisms/drivetrain.html#wheelbase-location","title":"Wheelbase Location","text":"<ul> <li>You want your wheels as far apart as possible in order to give you more stability, especially while turning. </li> </ul>"},{"location":"design-fundamentals/mechanisms/drivetrain.html#electrical-mounting","title":"Electrical Mounting","text":"<ul> <li>When designing a bellypan, you need to ensure that your electronics are as accessible as possible. What some teams do is they drill massive access holes in their cross tubing. One thing to keep in mind for this is you may want to 3D Print protection guards/rubber grommets on the holes to ensure the wires don\u2019t strip on the hole\u2019s sharp edges.</li> </ul>"},{"location":"design-fundamentals/mechanisms/elevators.html","title":"Elevators","text":"<p>A guide on elevators, including different types of rigging, COTS parts, gearboxes, and use cases.</p> <p>Coming Soon</p> <p></p>"},{"location":"design-fundamentals/power-transmission/electronics-motors-sensors.html","title":"Electronics, Motors, and Sensors","text":"<p>A guide on how to design space for electronics, the differences between commonly used motors in FRC, and sensors that can be used to increase the controllability of a robot.</p> <p>Coming Soon</p> <p></p>"},{"location":"design-fundamentals/power-transmission/linear-extension.html","title":"Linear Extension","text":"<p>Covers various linear extension systems such as worm gears and rack and pinion.</p> <p>Coming Soon</p> <p></p>"},{"location":"design-fundamentals/power-transmission/motion-components.html","title":"Motion Components","text":"<p>A rundown of bearings, bushings, axles, and the best use cases for them, including the mechanics behind transmission of torque through axles.</p> <p>Coming Soon</p> <p></p>"},{"location":"design-fundamentals/power-transmission/pneumatics.html","title":"Pneumatics","text":"<p>A rundown of bearings, bushings, axles, and the best use cases for them, including the mechanics behind transmission of torque through axles.</p> <p>Coming Soon</p> <p></p>"},{"location":"design-fundamentals/power-transmission/rotation.html","title":"Transfer of Rotational Motion","text":""},{"location":"design-fundamentals/power-transmission/rotation.html#transfer-of-rotational-motion","title":"Transfer of Rotational Motion","text":"<p>A power transmission is the transfer of rotational or linear motion from one system to another to transmit power. </p> <p>Belts</p> <ul> <li>Belts are lightweight and drive high speed mechanisms extremely well.</li> <li>In FRC, most common belt type is HTD5, and GT2 are the second most common.</li> </ul>  Difference between GT2 and HTD5 is the tooth profile, as GT2 tooth profile has teeth that are spaced 3mm apart from each other, whereas HTD5 teeth are spaced 5mm apart.   <p>When designing belts, you need to use a calculator such as ReCalc's belt-calculator to figure out the correct belt center to center, otherwise your belts may be over tensioned, or have too much slack. </p> <p>Chain</p> <ul> <li>Chains are heavy duty and handle high torque, but need to be tensioned unlike belts.</li> <li>3 Main Types:<ul> <li>25:<ul> <li>While 25 chain is relatively light, it is a lot less durable than 35 or 25h Chain, which is a concern when thinking about shock loads on a pivot.</li> </ul> </li> <li>25H:<ul> <li>25H Chain stands for Hardened #25, which means that the plates on the chain are thicker.This means that its a bit stronger than the 25 chain, while staying compatible with all 25 chain hardware.</li> </ul> </li> <li>35:<ul> <li>35 Chain is the strongest chain there is, and breaking this is a bit challenging. Best use case is heavy pivots. </li> </ul> </li> </ul> </li> </ul> <p>What is Backlash:</p> <ul> <li> <p>Backlash is when there is a gap between the teeth of gears or threads, which allows them to move slightly before actually engaging fully. This results in a delay in the motion when moving, and its extremely problematic as it introduces errors in positioning, affects the repeatability of your systems, and the systems response time is a bit slower. </p> </li> <li> <p>How to eliminate backlash:</p> <ul> <li>To minimize backlash in your system, you need to ensure that your chains are properly tensioned, or use a belt setup as your final reduction. When you assemble gearboxes apply shim tape. In FRC, the hex shafts are not all the exact same size, and this causes slop between the gear and shaft, and in gearboxes this slop accumulates. The way that 4414 shims all their position controlled subsystems is by cutting strips around 1.5x the width of the actual gear, and then apply the tape onto 1-2 faces depending on the tolerance of the shaft.</li> </ul> </li> </ul> <p>How To Tension Chain:</p> <ul> <li>Turnbuckle:<ul> <li>A turnbuckle is a device that is used to attach to two links, and tighten the chain together to keep the chain tensioned. </li> </ul> </li> </ul> <ul> <li>Idler System:<ul> <li>Idlers are a method to ensure that there is proper chain tensioning, and it essentially either pushes the chain in or outwards to decrease the amount of slack. </li> </ul> </li> </ul> <p>Gears:</p> <ul> <li> <p>Toothed wheels that are able to transmit motion and power. Commonly used to reverse directions, build gearboxes, and many more applications. </p> </li> <li> <p>Types of Gears:</p> <ul> <li>Spur Gears:<ul> <li>3 main types are 10 DP, 20 DP, 32 DP.  </li> <li>10 DP:</li> <li>Used to drive rack and pinions and turrets </li> </ul> </li> <li>20 DP:<ul> <li>Used a lot in gearboxes due to the wide variety of gear teeth. </li> </ul> </li> <li>32 DP:<ul> <li>Used in smaller areas due its smaller size.</li> </ul> </li> </ul> </li> </ul> <ul> <li>Herringbone<ul> <li>Also known as a double helical gear, the teeth form a V shape and are used to provide smooth and quiet operation while transmitting high torque. You can put a pretty high load on this as long as you increase the surface area and the contact between the teeth. These gears are commonly 3d printed.</li> </ul> </li> </ul> <ul> <li>Bevel Gears<ul> <li>Bevel gears are popularized with the COTS Max90 Gearbox, and are great for transmitting motion between shafts that are not parallel. They cannot handle a high load, and are used mainly for packaging.</li> </ul> </li> </ul> <p>Rack and Pinion:</p> <ul> <li>A rack and pinion is a system where a larger gear is driven by a smaller gear, and it is used a lot for hooded shooters like 1678 in 2022. You get a higher degree of control, but this system cannot handles a large amount of load. </li> </ul> <p>Winch:</p> <ul> <li>A  winch is a mechanical device that is used to wind up or wind out ropes or cable, and typically consists of a drum or spool around which the rope is swound and a handle or a motor that is used to rotate the drum, and it is used traditionally in telescoping arms and other climbers.</li> </ul> <p>Linear Actuator:</p> <ul> <li>Linear actuators are good for precise linear motion. They work by converting rotational motion into linear motion using a lead screw, and you get a very high degree of control and precision. </li> </ul> <p></p>"},{"location":"design-fundamentals/power-transmission/wheels-rollers.html","title":"Wheels and Rollers","text":"<p>Various wheels sold, their mechanical properties, and various use cases for them. Also a guide to different rollers. Useful for manipulation of a game piece.</p> <p>Coming Soon</p> <p></p>"},{"location":"design-fundamentals/structure/hardware.html","title":"Hardware Standards","text":"<p>A guide on hardware and hardware standards common in FRC, including best use cases and what to keep in mind when designing a robot in relation to hardware.</p> <p>Modern FRC generally uses two different types of imperial hardware, #10-32 and 1/4-20. However, 10-32 is vastely preferrable, and with a bit of effort, we can make robots that use almost exclusively 10-32 hardware. In general:</p> <ul> <li>10-32 is used for almost everything: retaining shafts, screwing into motors, superstructure, etc.</li> <li>1/4-20 hardware is used for structural applications where more strength is required than #10 can provide. </li> </ul> <p>When designing around hardware, it is best to use the hole tool</p> <ul> <li>10-32 hardware uses a hole diameter of 0.196 inches for a standard fit</li> <li>1/4-20 hardware uses a hole diameter of 0.257 inches for a standard fit</li> </ul> <p>Include different kinds of hardware and where to buy them?</p> <p></p>"},{"location":"design-fundamentals/structure/materials.html","title":"Materials","text":"<p>Polycarbonate plastic is used in high impact applications such as subsystems that are exposed beyond the robot frame perimeter. Typically 1/4\" thickness is used. 1/8 or 1/16\" polycarbonate can be used for dust covers, sponsor panels, etc - it will almost never shatter and looks great.</p> <p>Tip</p> <p>\"Smoked\" or \"tinted\" polycarbonate can provide a more aesthetic look than clear. While making smoked polycarbonate is difficult, making frosted is easy! 30 seconds of sanding with an orbital sander using 240 grit will give the material a nice, glassy finish.</p> <p>1/8, 3/16, and 1/4 aluminum stock are generally used for gussets and plates that have to be stiffer than plastic could provide. Avoid using use these materials in applications where they will be exposed beyond the robot frame, as they are not as impact-resistant as plastics and can easily bend, or fail catastrophically. 6061-T6 is the most common alloy, but 7075 is sometimes used and has higher yield strength.</p> <p>Note</p> <p>Make sure to check your supplier's thickness and tolerance for each material. Sometimes something marketed as in imperial measurements is actually manufactured to fit metric tolerances. For instance: 1/4\" polycarb is actually sometimes manufactured as 6mm, which is 14 thousandths of an inch off of 1/4in. Account for these actual stock measurements when designing to make sure things end up fitting together!</p>"},{"location":"design-fundamentals/structure/materials.html#pocketing-and-internal-features","title":"Pocketing and internal features","text":"<p>Pocketing is used to reduce weight from high-thickness, high density materials such as 3/16 or 1/4 aluminum. While thinner aluminum and plastics can also be pocketed, this is less common, and higher risk.</p> <p>Tip</p> <p>Pocketing always happens last. Get design approval before pocketing! Use offset driven design so your plates look decent before pocketing.</p> <p>When pocketing, use the Vent featurescript </p> <ul> <li>Tool radius must be \u22650.125 the radius of the cutting tool you use on your CNC, typically 0.125</li> <li>Strut thickness is usually 0.2 for 1/4 inch aluminum, and cut thru-all - but this depends on load and other factors</li> </ul> <p></p>"},{"location":"design-fundamentals/structure/structure.html","title":"Structure","text":"<p>How to use materials in different forms and various COTS pieces to create a robust and versatile structure system.</p> <p>Coming Soon</p> <p></p>"},{"location":"design-guide/index.html","title":"FRC Design Guide and Curriculum","text":"<p>Welcome to the DDS design guide! This guide is in progress, so if you have difficulty understanding something, please give us feedback as soon as possible!</p> <p>This design guide assumes you know about FRC and have gone through at least a season of FRC. As this guide develops, we hope to cover absolute beginners, but for now this helps keep the project a bit more feasible. We'll cover getting Onshape set up and all the various tools you need at first, then start working immediately on projects which help build your CAD skills while gradually introducing design principles.</p> <p>Although heavily recommended to go through for now, the aim is to replace the Onshape Learning Center, at least in the context of FRC. Eventually, you will be able to just go through this guide to become both proficient at using Onshape and at designing good robots for FRC.</p> <p>Instead of covering random features and tools that you might not use in FRC, this curriculum focuses on using features and skills that would be beneficial to use in an FRC context. After the fundamentals for sketching and part design are learned, it focuses very heavily on guided projects, slowly becoming more open-ended.</p>"},{"location":"design-guide/index.html#beginner-stages","title":"Beginner Stages","text":"<p>Tip</p> <p>If you already have some experience with CAD in Onshape, specifically sketching and part design, you may skip to Stage 1B for your first project and continue from there. It will help you start learning the preferred workflow to design mechanisms in Onshape.</p>"},{"location":"design-guide/index.html#stage-0","title":"Stage 0","text":"<p>Stage 0 is for people that haven't touched CAD or Onshape before. It includes an in-depth introduction to CAD to read or skim through, a walkthrough to setup your Onshape account and add the tools you need to continue with the curriculum, a guide on navigating Onshape and the difference between part studios and assemblies, and some basic CAD theory that will help develop a good mindset. After this stage you can move onto the next one and actually start learning and practicing your skills. </p>"},{"location":"design-guide/index.html#stage-1","title":"Stage 1","text":"<p>In this stage, you begin with learning the fundamentals of Onshape sketching and part design, then move onto guided projects (a swerve drivebase and two gearboxes) to teach you how to use tools, part studios, and assemblies in the context of FRC. We'll try to briefly cover a number of fundamental FRC-specific tools that will help speed up your workflow.</p>"},{"location":"design-guide/index.html#stage-2","title":"Stage 2","text":"<p>In stage 2 we continue to focus on covering more design skills and concepts while we practice our CAD skills, but through isolated mechanisms. There will be fewer new CAD concepts introduced here, while we introduce 1-2 design concepts per project. By the end of this stage you should be significantly more comfortable using Onshape as well as have an understanding of the mechanisms that go into a robot and the workflow required to design those mechanisms. </p>"},{"location":"design-guide/index.html#stage-3","title":"Stage 3","text":"<p>After finishing the last stage, you should be comfortable with the tools required to design a robot. This stage transitions to higher level projects, first focusing on high-level design practices and workflows, like how to create effective mastersketches, then transitions into replicating simple robots using what you've learned about both the CAD and the mechanisms themselves. You will learn how the basic mechanisms integrate together and how to apply top-down design practices.</p>"},{"location":"design-guide/index.html#intermediate-stage-4","title":"Intermediate: Stage 4","text":"<p>In this stage, you'll focus on mastering the design fundamentals to the point where they are natural. This means learning how to optimize your CAD to be more parametric, mastering best practices and workflow that makes your CAD faster and more easily collaborated on, and learning more about engineering design and strategic design. </p> <p></p>"},{"location":"design-guide/stage4.html","title":"Stage 4: Intermediate","text":"<p>Welcome to stage 4, practically the last stage! In this stage, you'll focus on mastering the design fundamentals to the point where they are natural. This means learning how to optimize your CAD to be more parametric, mastering best practices and workflow that makes your CAD faster and more easily collaborated on, and learning more about engineering design and strategic design. There aren't any specific steps or projects in this stage; it's a lot more open-ended, and can be seen more as a \"choose your own adventure\".</p> <ol> <li> <p>Work on your own projects and get feedback. This could be mechanisms you don't have practice with, robots for specific games, or just anything you're interested in. Practice your workflow, optimize your CAD to be more parametric, and learn new ways of doing things. Make sure to get design reviews and feedback from team members, mentors, or in the discord server. As you get better, your improvements will be more in speed gains, parametric CAD, and optimizing load times.</p> <p>Tip</p> <p>The \"design-review\" forum channel can be posted in to look for feedback with a more determined structure. Feel free to ask for more specific feedback.</p> </li> <li> <p>Examine and learn from examples of robots. Often the most important tool for learning is to look at examples of other robots. \"Steal from the best, invent the rest.\" Most things you'll ever need to design in a typical season have already been done in some form or another, and you can take easy inspiration from other teams while trying to improve it for your application. Open Alliance on ChiefDelphi is a great resource on the design and build process for many teams, and has a lot of public CAD.</p> </li> <li> <p>Learn more engineering design. Refer to the design fundamentals pages and the deep dives in the mechanism examples pages. This includes how to assess potential forces on parts of the robot, pick the right materials, design rigid structures, learn more about what parts are available to FRC teams and how to use them effectively, and at a top level, what goes into designing good mechanisms.</p> </li> <li> <p>Learn strategic design. This means learning how to set priorities and requirements for your robot. This means basing your design off of your game analysis, those priorities, and your team's capabilities. This means learning how to design simply but effectively. This means learning how to structure a build season schedule and tradeoffs based off of your priorities. There are many resources for this, including Karthik's Effective FIRST Strategies presentation, Team 1678's training material, and Team 2910's Pop-Up Presentations. Combine this with good engineering design knowledge and CAD skills and most any team can design and build an effective robot and do very well in competitions.</p> </li> </ol> <p></p>"},{"location":"design-guide/stage0/0A-introductionToCAD.html","title":"0A: Introduction to CAD","text":"<p>CAD is an acronym for \"computer-aided design.\" It's a software tool used by engineers, manufacturers, architects, and many more designers in industry to bring their ideas to life. </p> <p>CAD is used to create a 3D model from various kinds of steps and tools to help prototype, manufacture, and market a product. Files can be sent to a machine to either print or cut material. Drawings can also be made and printed out to assist with manual machining and assembly.</p> <p>Note</p> <p>A quick intro to CAD and Onshape is provided in the Introduction to Parametric Feature-Based CAD learning course, but it doesn't provide much relevant information for FRC.</p>"},{"location":"design-guide/stage0/0A-introductionToCAD.html#different-software","title":"Different Software","text":"<p>There are many different kinds of CAD, usually designed for specific industries in mind. The kind of CAD an architect might use would be different from the kind of CAD engineers use. The tools required may be different as well.</p> <p>Engineers mostly use parametric feature-based CAD, which includes programs like Autodesk Inventor and Fusion, SolidWorks, and Onshape. These programs can be designed around different workflows, but usually have similar features. It's important to learn the workflow for a specific program; often, they aren't exactly transferrable.</p> <p></p>"},{"location":"design-guide/stage0/0A-introductionToCAD.html#why-use-cad","title":"Why Use CAD?","text":"<p>CAD is the intermediary between an idea and a built product. Teams can iterate ideas before prototyping and manufacturing, and it helps cut down on prototyping time. Good CAD efficiency can help a team design a good robot in a timely manner, leaving room for software testing and drive practice.</p> <ol> <li> <p>Design your robot before you cut to make sure things will fit together and that you have the correct measurements. It is frustrating to realize you cut a part too short and need to recut an entirely new piece or when you need to drill random holes throughout your beautifully machined channel. </p> </li> <li> <p>While you may think your team is on the same page and has agreed upon a design, your whiteboard drawings may leave some room for interpretation. When you use CAD to model your design, everyone can see a mockup of the end result and agree on a design and direction. </p> </li> <li> <p>Team members that were more heavily involved in the design process or ideation may know how the robot should function and how to fabricate it. This can leave them doing the bulk of the work. Using CAD can help those team members explain to other team members what they can to do to help build the robot. </p> </li> <li> <p>Newer team members that have not been involved in a robotics season before may have no idea what components and processes are needed to build a robot. CAD can be a great teaching tool to show those team members what is needed on the robot so they can help with the process too!</p> </li> <li> <p>The worst feeling is when you go to weigh your carefully constructed robot for the first time only to realize that it is 10 pounds overweight! You can measure your robot's size and weight in Onshape so you can make sure that it meets requirements. This gives you the opportunity to make changes before fabrication, such as using a pocketing feature to cut out excess material. </p> </li> <li> <p>CAD works like a digital blueprint and bill of materials of the robot. It can allow students to visualize the intricacies and precise dimensions in their mechanisms to make sure everything fits.</p> </li> <li> <p>CAD skills are used in the real world all the time, when designing and testing anything from simple product design to large feats of engineering like planes or cars. Learning CAD with any CAD software can equip you with useful skills you can put on your resume, and it will allow you to learn other CAD software a little easier.</p> </li> </ol> <p></p>"},{"location":"design-guide/stage0/0A-introductionToCAD.html#why-onshape-for-frc","title":"Why Onshape for FRC?","text":""},{"location":"design-guide/stage0/0A-introductionToCAD.html#collaboration","title":"Collaboration","text":"<p>Onshape allows and is built around team collaboration better than any other CAD software. </p> <p>Most companies (or robotics teams) have to invest in Product Data Management (PDM) software or websites in order to manage files and versions. This requires a check-in check-out process to make sure the same file isn't being worked on by different people at the same time. In Onshape, multiple people can work on the same or different parts of the robot at the same time with no worry about revision management or a check-out process.</p>"},{"location":"design-guide/stage0/0A-introductionToCAD.html#accessibility","title":"Accessibility","text":"<p>Onshape is more easily accessible to people, especially high schoolers with limited resources. Education licenses are free and easy to get, and include all the features a team would need to design a competitive robot with a decently sized team. Anyone can pull it and any shared documents up on a browser if they have access to the internet, even on a Chromebook; Onshape does not require good hardware, but can still benefit from it anyways.</p>"},{"location":"design-guide/stage0/0A-introductionToCAD.html#organization","title":"Organization","text":"<p>Instead of files, Onshape uses documents that keep everything related to a project (e.g. a whole subsystem) in the same place, as opposed to having to keep track of many separate files that could possibly corrupt and cause you to lose data. </p>"},{"location":"design-guide/stage0/0A-introductionToCAD.html#features","title":"Features","text":"<p>Onshape has many features that benefit the FIRST Robotics design process and workflow, even disregarding the other topics mentioned. The design of the software itself encourages top-down design (where the general overview and architecture of a product are defined first, and the details are defined based on that), which makes team collaboration around a robot design easier. </p> <p>There are also several community-made tools to help FRC teams, including an extensive part and assembly library called MKCAD and many useful custom features that can save a lot of time. </p> <p></p>"},{"location":"design-guide/stage0/0A-introductionToCAD.html#other-softwares","title":"Other Softwares?","text":"<p>Onshape is only one of many CAD softwares. Many teams may choose not to use it because of prior student and mentor experience and resources with another software, or a workflow has already been established that works very well for a team with a different software. Onshape is by no means common in the engineering industry, so mentors are more likely to be able to guide a team well using other softwares. </p> <p>Depending on the circumstances, Onshape may not be the best fit for a team; however, this guide focuses on Onshape because of the above mentioned reasons for why it's so good for FRC, and the abundant other resources made for using Onshape for FRC. Much of the design process itself and many of the mechanism fundamentals and glossary still apply though, no matter what CAD software you're using.</p> <p></p>"},{"location":"design-guide/stage0/0B-setup.html","title":"B: Onshape Setup","text":""},{"location":"design-guide/stage0/0B-setup.html#0b-onshape-setup","title":"0B: Onshape Setup","text":""},{"location":"design-guide/stage0/0B-setup.html#registering-for-onshape","title":"Registering for Onshape","text":"<p>Onshape offers a free education license for students to use their software. It is highly recommended to use the education plan, as it allows for the creation of private documents, as well as other useful features.</p> <p>To start registering, go to the Onshape for Education page and select \"Create EDU ACCOUNT\" or click this link. Follow the slides below to finish registering.</p> <p></p>  Fill out the details in the sign up form.   On the next screen, select that you are a student and that you are in grade school.  Finally, fill the form with your school information. You may enter \"Robotics\" as the reason for using Onshape.  \u276e \u276f <p>Onshape will proceed to check your information (which may take some time), then send a verification email to activate your account. You'll be asked to set a password, then you'll enter your dashboard.</p>"},{"location":"design-guide/stage0/0B-setup.html#account-setup","title":"Account Setup","text":"<p>The first time you enter Onshape, it will prompt you to set up your account, including the default units and mouse controls used when doing CAD. You can also set a profile picture and a nickname (we recommend keeping this as your real name). Finally, Onshape will run a browser check, to ensure compatibility. </p> <p>Note</p> <p>If the browser check fails, you may want to try a different browser. Currently, chromium browsers like Chrome, Edge, Opera, and Arc are the best supported browsers for Onshape, but Firefox usually works with no issues as well. Safari is not well supported.</p> Chrome Browser Setup <p>If you are using Chrome, an additional setup step may be required.</p> <p>First, type <code>chrome://settings/</code> in your searchbar to navigate to chrome settings. Make sure that \"Use graphics acceleration when available\" is enabled. Relaunch chrome if you have updated it to enable it.</p> <p></p> <p>Next, go to <code>chrome://flags/</code> and enable these:</p> <p></p> <p>If your team uses Onshape, contact your mentor/design lead for access to the Onshape classroom/team.</p>"},{"location":"design-guide/stage0/0B-setup.html#setting-up-mkcad","title":"Setting up MKCad","text":"<p>MKCad is an Onshape plugin that contains a large library of parts that are often useful in FRC.</p> <p>To install it, go to the MKCad App in the Onshape Appstore.</p> <p>Press \"Subscribe\", then \"Get for Free\". This will automatically add MKCad to your Onshape account.</p> <p>Note</p> <p>After subscribing, the MKCAD inserter won't show up in already open documents until you reload. This is a first-time thing though.</p> Video Tutorial <p>    Your browser does not support the video tag. </p>"},{"location":"design-guide/stage0/0B-setup.html#featurescripts","title":"Featurescripts","text":"<p>Featurescripts are custom features coded by members of the community, and are often handy tools that assist with the FRC design process. For now, follow the instructions below to install just the featurescripts you'll use in stage 1A. More thorough instructions for installing featurescripts, a list of all recommended featurescripts, and some troubleshooting tips are found on the featurescripts page.</p> <ol> <li> <p>Open the document Julia's Featurescripts</p> </li> <li> <p>Click \"Custom Features\" </p> </li> <li> <p>Click \"Belts\", \"Chain Path\", \"Extrude Individual\", \"FilletXpert\", \"Shaft\", \"Spacer\", and \"Tube Converter\" (this one is important)</p> </li> </ol> Video Tutorial <p>    Your browser does not support the video tag. </p> <p>Once you have that done, you are ready for the next stage!</p>"},{"location":"design-guide/stage0/0B-setup.html#optional-onshape-educator-plan","title":"OPTIONAL: Onshape Educator Plan","text":"<p>Besides individual setup, if your team uses Onshape or are switching to it, one of your mentors or design leads should get the Educator plan and add all members to a \"classroom\". The Educator plan is free for FIRST teams and will make document management easier. It also provides a suite of features for all students added to the \"classroom\", such as simulation, release management, and classes/assignments. </p> <p>We recommend you read the ChiefDelphi post linked below for a better overview and walkthrough to set it up for your team.</p> <p>Onshape Educator Plan: What it Means for FRC Teams</p> <p></p>"},{"location":"design-guide/stage0/0C-navigation.html","title":"0C: Navigating Onshape","text":""},{"location":"design-guide/stage0/0C-navigation.html#documents-page","title":"Documents Page","text":"<p>Documents can be viewed and managed from the documents page. You can sort them with folders and labels. On the sidebar, you can switch between stuff owned by you and stuff owned by a classroom/team/organization, and a public search page which can be used to look through public Onshape files. In the top right corner of the page, you can access the app store, learning center, and account settings.</p> <p>You can create a document or folder or import CAD files from your computer using the \"Create\" dropdown button on the left.</p> <p></p> <p>You can use this page in the learning center to explore the documents page.</p>"},{"location":"design-guide/stage0/0C-navigation.html#customizing-your-account","title":"Customizing Your Account","text":"<ul> <li>Change default units and precision</li> <li>Change email notifications</li> <li>Change default view manipulation if you're more familiar with a different CAD software</li> <li>Use the subscriptions section to renew your student/educator subscription each year</li> </ul>"},{"location":"design-guide/stage0/0C-navigation.html#navigating-documents","title":"Navigating Documents","text":"<p>An Onshape document is not a CAD file, but a container that holds data related to a project, including any number of part studios, assemblies, drawings, and other media/files. It can be versioned and linked to from other documents. There are two main types of environments in a document: part studios and assemblies.</p> General Document NavigationPart StudiosAssemblies <p>A document has some defined regions that stay generally consistent in both main environments.</p> <ul> <li>Document Toolbar: You can manage the document, navigate back to documents page (click logo), and view versions and history.</li> <li>Toolbar: Changes depending on the environment, but contains all the features you use to perform actions in Onshape. Most of these have keyboard shortcuts (full list in the help menu).</li> <li>Tab bar: Organizes different tabs in the document. Can be sorted into folders. Add new folders and tabs to the document by clicking the plus on the bottom left.</li> <li>Left Side (Feature/Part/Instance/Mate List): Breaks down how parts/assembly was made.</li> </ul> <p> </p> <p>The space in the middle is called the graphics area. You can interact with the model by selecting entities or rotating the view. </p> Mouse Controls <p> </p> <p>Selection</p> <p>Onshape has persistent selection, which means each left click on a face or entity adds it to a selection group. Clicking an entity again will deselect it, while clicking in the blank space or pressing the spacebar will deselect all entities.</p> <p>Measurement</p> <p>To measure lines or distances, select the entities you want to take the measurement of and the numbers will display next to the tape measure in the bottom right of the graphics area. Click the tape measure for more detailed measurements.</p> <p>One of the main differences between Onshape and other CAD systems is the part studio. </p> <p>A part studio is an environment where you can design and model one or more parts at a time and add robust relationships between them. You do this using a series of sketches and features. This helps build design intent between multiple parts easily without having to switch between different files. </p> <p>Part studios provide many different tools for designing, creating, and manipulating parts, most of which you'll learn through Stage 1. </p> <ul> <li>Dialogue Boxes: Each feature and sketch pops up a dialogue box with options to configure and confirm it</li> <li>Toolbars: The main toolbar contains all the tools you'll need to create parts, most of them with a keyboard shortcut for quick usage. <ul> <li>When editing sketches, the feature tools are replaced with sketch tools to assist in creating 2D geometry. </li> <li>Both toolbars have basic geometry creation and geometry alteration tools.</li> </ul> </li> </ul> <p>Note</p> <p>The part studio is for designing the parts, while an assembly is used for putting the parts together and defining motion (this means only model one of each part if there are duplicates and duplicate them in the assembly instead.)</p> <p>Assemblies are for positioning and establishing movement between parts. The main function for this \"mates\", which establish the degrees of freedom between parts. Parts can move freely in an assembly before their position/movement is defined with mates. The purpose of assemblies in Onshape is the same as in other CAD programs, but the workflow is significantly different.</p> <p>Info</p> <p>The assembly workflow will be taught through the learning center and exercises throughout stages 1 and 2.</p> <p>Using the assembly toolbar, you can:</p> <ul> <li>Insert parts and subassemblies</li> <li>Different kinds of mates (restrict different degrees of freedom)</li> <li>Special tools for movement and replication</li> </ul> <p>When using a mate:</p> <ul> <li>Every part and face generates mate connectors at smart spots<ul> <li>You can manually create mate connectors in part studios</li> </ul> </li> <li>Select two separate mate connectors</li> <li>Flip or rotate axis to get the part/assembly in the right orientation</li> <li>You can offset in a specific axis by distance or angle</li> </ul>"},{"location":"design-guide/stage0/0C-navigation.html#other-notes","title":"Other Notes","text":""},{"location":"design-guide/stage0/0C-navigation.html#organization-practices","title":"Organization Practices","text":"<p>One of the big reasons Onshape is desirable for FRC is its collaboration capabilities, but that means nothing when nobody can read or work with your CAD. Different subsystem leads will have to collaborate and view other separate subsystems. None of the easy communication and collaboration can be done without good organization and naming practices.</p> <p>Make it annoyingly clear what sketches and features do what. Name sketches and features, and try to use folders. Sort by parts or groups of parts (e.g. tubes, gussets, bellypan). The instance list in assemblies can also get very messy and slow down your workflow, so keep similar instances in folders. And finally, just make sure to name tabs. This will all make a big difference for the readability of your CAD by other people and yourself.</p>"},{"location":"design-guide/stage0/0C-navigation.html#versions-and-history","title":"Versions and History","text":"<p>Every action by every user is saved in the history, and can be rolled back to or created a version at. When assemblies are linked between documents, documents have to be versioned. This reduces loading times as well, since it's only referencing a single static version and not constantly attempting to update. Versions cannot be deleted, and branches can be created and merged for changes, similar to git.</p> <p></p>"},{"location":"design-guide/stage0/0D-theory.html","title":"0D: Theory","text":"<p>As you probably know, CAD is a tool used to design parts digitally before they are manufactured. Most of our documentation will focus on FRC-specific CAD practice. However, to get started with Onshape, it\u2019s important to understand some basic theory.</p> <p></p> <p>Consider a basic 3D object, such as this cylinder. Every object you design in Onshape starts with a 2D sketch within a window called a part studio. Sketches are used to define a 2D profile, that is then manipulated with features. These features transform the 2D sketch, one change at a time, into a 3D object - by \u201cextruding\u201d or pulling the profile into 3D, revolving it around an axis, or by other methods. </p> <p></p>"},{"location":"design-guide/stage0/0D-theory.html#starting-with-a-sketch","title":"Starting with a Sketch","text":"<p>  If you wanted to create this cylinder in Onshape, we would start by representing its profile in a 2D sketch. So what would this sketch look like for a cylinder? If we take the section from the plane on the top of the cylinder. In Onshape this is called the \u201cTop\u201d plane. We can see that this sketch forms a circle. </p> <p>Note</p> <p>We could represent the cylinder in other 2D ways, if we chose a different plane.</p>"},{"location":"design-guide/stage0/0D-theory.html#making-the-leap-to-3d","title":"Making the leap to 3D","text":"<p>While in the sketch, we define the nature of the circle - its position in space and its diameter. When we bring the sketch into 3D, these characteristics are maintained - determining the final diameter and position of the cylinder within the part studio. It is important to completely define the characteristics sketches so that the characteristics of the part being designed are not arbitrary. </p> <p> But how do we transform this defined sketch into a 3D object? By using features. In this case, an \u201cextrude\u201d feature is used to extend the profile of the sketch into 3D space. Just like how we defined the sketch, we define the characteristics of this extrude. For example, we must specify a \u201cdepth\u201d or final \u201cheight\u201d for the cylinder. This is used to create the final geometry. There are many such settings we must specify when using features.</p> <p>Additional sketches and features are used to add more complex geometry to parts or to create additional parts within the part studio.</p> <p>Note</p> <p>Features can also be used to modify existing geometry e.g. to round or chamfer corners; these don't require sketches.</p>"},{"location":"design-guide/stage0/0D-theory.html#summary","title":"Summary","text":"<p>Congratulations on completing Stage 0D! </p> <p>Here is a quick summary of the theory behind creating a part in feature-based CAD:</p> <ul> <li>Create a new sketch within a new part studio</li> <li>Define the sketch with constraints</li> <li>Transform the sketch into a 3D object with specified features</li> <li>Manipulate the part with additional features </li> <li>Repeat these steps until the part is complete</li> </ul> <p>Remember: One \u201cpart studio\u201d can have multiple, even many different parts. We won\u2019t focus on it for now, but keep it in mind!</p> <p>Stage 0 has introduced the idea of CAD and why we use it in FRC, helped you set up an Onshape account, introduced the interface of Onshape, and introduced the fundamental theory of feature-based CAD. Now it's time to move on to Stage 1 where you'll start learning the software and doing exercises, practicing skills relevant to an FRC context. Good luck!</p> <p></p>"},{"location":"design-guide/stage1/1A-onshapeFundamentals.html","title":"A: Onshape Fundamentals","text":""},{"location":"design-guide/stage1/1A-onshapeFundamentals.html#1a-onshape-fundamentals","title":"1A: Onshape Fundamentals","text":"<p>Welcome to Stage 1! Here, you'll engage in a series of Onshape exercises and projects designed to introduce and develop your CAD skills within an FRC context. </p>"},{"location":"design-guide/stage1/1A-onshapeFundamentals.html#getting-started","title":"Getting Started","text":"<p>In 1A, there are 3 major sections: sketching and part design, multi-part part studios, and assemblies. Each section has a link to a learning course to learn the skills of each topic, then an exercise to help immediately apply those skills in an FRC context. </p>"},{"location":"design-guide/stage1/1A-onshapeFundamentals.html#learning-courses","title":"Learning Courses","text":"<p>Onshape's Learning Center provides free learning courses and articles covering everything from document navigation and sketching to advanced surface and sheet metal modeling. It's a valuable resource for both novice and seasoned users alike. We use a few selected courses to assist learning the fundamentals of doing CAD in Onshape, but the rest of the curriculum is project based.</p> <p>The structure of the courses includes some short videos and practice models, expected time is 2-4 hours.</p> <p>Tip</p> <p>Additionally, the Onshape Help site is a great resource to use if you are unsure how a specific feature of Onshape works. </p> <p>Warning</p> <p>The Onshape learning courses are important as they will teach you the Onshape interface and form a basic foundation for CAD skills. Unless you have prior experience using Onshape, you should not skip the learning courses as the exercises assume that you have an understanding of CAD basics.</p>"},{"location":"design-guide/stage1/1A-onshapeFundamentals.html#practice-exercises","title":"Practice Exercises","text":"<p>Make a copy of the Stage 1A Exercises Document. A template for each exercise has been created for you in the exercises document (you do not need to create any new tabs). Each exercise also includes a preview of what the final model should look like in the <code>Reference</code> file. Solutions are available here.</p> <p>Tip</p> <p>You can navigate between the tabs by accessing the tab manager or from the bottom navigation bar.   Accessing the Tab Manager. </p>"},{"location":"design-guide/stage1/1A-onshapeFundamentals.html#sketching-and-part-design","title":"Sketching and Part Design","text":"<p>Sketches and features are the building blocks you will use to create every 3D model in Onshape, so it's good to have a good grasp on the fundamentals.</p> <p>Complete the following courses:</p> <ol> <li> <p>The Introduction to Sketching course runs you through different sketch tools, constraints, and a good sketch workflow.</p> </li> <li> <p>The Part Design Using Part Studios course runs you through creating different parts with a variety of features.</p> </li> </ol> <p>With a good understanding of both of these, you can create almost any part you want to. The following sections are all about integrating design intent into the process and learning how to design a whole project with multiple pieces.</p> <p>Tip</p> <p>For future reference without having to go through the learning center, sketch basics, sketch tools, feature basics, and feature tools are all covered in text form in the help center. </p>"},{"location":"design-guide/stage1/1A-onshapeFundamentals.html#exercise-1-simple-box-tube","title":"Exercise 1: Simple Box Tube","text":"<p>In FRC, robot structures are typically constructed out of aluminum box tubing, similar to wood beams for a house. Aluminum box tubing is commonly found in 2\"x1\", 1\"x1\", and 2\"x2\" sizes with 1/8\" (thickwall) or 1/16\" (thinwall) wall thicknesses. Box tubing is typically referred to by its size, eg: 2x1, 1x1, and 2x2 (Spoken as \"two-by-one\", \"one-by-one\", and \"two-by-two\"). For the rest of the design-guide, we will use this notation when referring to box tube.</p> <p>Example</p> <p> Example of 2x1 box tube structure on a robot </p> <p>For exercise 1, you will be modeling a simple 2x1 with some holes in it. For this exercise, do not use any Featurescripts.</p> <p>Note</p> <p>You will see in some slides that the sketch dialogue box has a different name, such as \"Tube Profile\". You can rename sketches and features by hovering over the name in the dialogue box and clicking the pencil icon, or right clicking a sketch or feature in the feature list and clicking \"rename\". </p> <p>You should name your sketches and features and organize them into folders. This helps enable collaboration and makes working on previous features much faster.</p> <p>Exercise 1 Instruction Slides</p> 0. The final part. 1. Start by sketching a center rectangle on the top plane. 2. Extrude the rectangle symmetrically, 2\" tall. 3. Shell the block to turn it into a 1/16\" wall tube. 4. Add the top holes. Set the centerpoint of the hole to be vertical with the midpoint of the bottom line, then Mirror the hole across, using the front plane as the mirror line.  5. Add the side holes. Create the layout for the side holes by creating a center point rectangle and turning it into construction geometry.  6. Name the key sketches and part. Set the material to be 6061 Aluminum.  \u276e \u276f <p>Notice how we utilized construction geometry to define the location of the holes on the 2\" face of the tube. Using construction geometry to assist with sketching makes your parts more parametric and betters conveys design intent compared to manually specifying the location of each hole with dimensions.</p>"},{"location":"design-guide/stage1/1A-onshapeFundamentals.html#multi-part-modeling","title":"Multi-Part Modeling","text":"<p>Complete the Multi-Part Part Studios course. It runs you through top-down design principles (EXTREMELY important in FRC), sketching for multiple parts (master sketches), and some more practical skills for working with multiple parts in a part studio.</p> <p>As introduced in the learning course, Onshape is a software focused on multi-body modeling and top-down design. In FRC, this usually means one master sketch and one part studio per subsystem. Check out this page to learn more about best practices for sub-documents. The following practice exercises will help you reinforce these concepts.</p> <p>Example</p> <p>Notice how there's one instance of each unique part within this part studio. The part studio also resembles the completed product, as the parts are modeled relative to each other.  Example of a part studio </p>"},{"location":"design-guide/stage1/1A-onshapeFundamentals.html#exercise-2-box-tube-and-gusset-joint","title":"Exercise 2: Box Tube and Gusset Joint","text":"<p>For this exercise, you will design two tubes and a part called a \"gusset\". A gusset is the flat part that connects the two tubes. This gusset will be created in the same part studio as the tubes that it is connecting!</p> <p>Example</p> <p> Example of a gusset </p> <p>You will utilize the <code>Extrude Individual</code> and <code>Tube Converter</code> Featurescripts for this exercise. Do not use the <code>Gusset</code> Featurescript for this exercise.</p> <p>The <code>Extrude individual</code> Featurescript enables you to extrude sketch regions without merging them. In this exercise, if you were to extrude the sketch of the tubes with the standard <code>Extrude</code> tool, only a single part would generate.</p> <p>The <code>Tube Converter</code> Featurescript condenses the steps of shelling, sketching and dimensioning holes, and extruding holes into a single, customizable feature to easily model tubes. </p> <p>Tip</p> <p>When extruding a sketch in a part studio, you can decide whether to <code>Add</code> to existing geometry, or to create <code>New</code> geometry. <code>New</code> creates a new body, whereas <code>Add</code> will merge the feature with existing parts. Make sure that when you extrude your gusset, you tell Onshape to create a new part.  The different options for extruding </p> <p>Exercise 2 Instruction Slides</p> 0. The finished parts. 1. Start by sketching the tubes on the right plane. 2. Use the <code>Extrude Individual</code> Featurescript to extrude the blocks.  3. Use <code>Tube Converter</code> Featurescript to turn the blocks into 1/16\" wall tubes with a 0.5\" spacing pattern of 0.196\" holes. 4. Draw a triangle with construction geometry for the gusset.  5. Dimension the triangle to be 0.5\" away from the edges of the tube.  6. Use the <code>Offset Entities</code> tool to offset the construction geometry 0.25\". This will be the outline of the gusset.  7. Use the <code>Sketch Fillet</code> tool to add a 0.25\" fillet to the three corners of the gusset.  8. Delete the three points left over from the fillet.  9. Use the <code>Use (Project/Convert)</code> tool to project the tube holes onto the gusset sketch.  10. Extrude the gusset to be 1/8\" thick. Select <code>New</code> as the extrude type to make the extrude a new part.  11. Name the key sketches and parts. Set the material to be 6061 Aluminum.  \u276e \u276f <p>In this exercise, you can begin see the power of Featurescripts. What would have been a number of sketches, extrudes, and shells to create the tubes is packaged into a single, easy to use custom feature. </p>"},{"location":"design-guide/stage1/1A-onshapeFundamentals.html#assemblies","title":"Assemblies","text":"<p>Assembling is the basic function of defining the position and motion of parts in an assembly.</p> <p>The Onshape Assemblies course introduces assemblies, mating parts together, and other useful assembly concepts.</p> <p>As was introduced in the Onshape learning tutorials, when parts are inserted into an assembly, they free float. We can utilize a number of different assembly tools to constrain the motion of all the parts:</p> <ul> <li><code>Group</code>: Restricts the relative motion between a group of parts.</li> <li><code>Fix</code>: Locks a part in place within the assembly. (Not recommended as it's not parametric.)</li> <li><code>Mates</code>: Tools to constrain the degrees of freedom between parts using \"mate connectors.\" These connectors are automatically generated or manually created coordinate systems on parts. You can align the axes and apply offsets in any direction or rotation. Different mates constrain different degrees of freedom. Here are three commonly used mates:<ul> <li><code>Fasten</code>: Prevents any movement between two mate connectors, such as a bolt in a hole.</li> <li><code>Revolute</code>: Allows rotational movement about the z-axis between two mate connectors, like an arm pivot (e.g. an arm pivot).</li> <li><code>Slider</code>: Enables linear movement along the z-axis between two mate connectors (e.g. an elevator).</li> </ul> </li> </ul> <p>Example</p> <p> Example of a fasten mate. </p> <p>The best practices for constraining an assembly, along with other assembly tools like replicate, pattern, and standard content, will be learned through projects and described in more detail in later stages. They are also outlined here.</p>"},{"location":"design-guide/stage1/1A-onshapeFundamentals.html#exercise-3-box-tube-frame","title":"Exercise 3: Box Tube Frame","text":"<p>For this exercise, you will create a simple frame and two gussets. Then, you will create an assembly and mate together all the components.</p> <p>You will utilize the <code>Extrude Individual</code>, <code>Tube Converter</code>, and <code>Gusset</code> Featurescripts for this exercise.</p> <p>The <code>Gusset</code> Featurescript is an easy way to create gussets by selecting the locations of the holes the gusset should attach to.</p> <p>Exercise 3 Instruction Slides</p> 0. Final assembly. 1. Start by sketching the tubes on the right plane. 2. Use the <code>Extrude Individual</code> Featurescript to extrude the blocks. 3. Use <code>Tube Converter</code> Featurescript to turn the blocks into 1/16\" wall tubes with a 0.5\" spacing pattern of 0.196\" holes. 4. Use the <code>Gusset</code> tool to create the top gusset by selecting the holes on the tube.  5. Use the <code>Gusset</code> tool to create the bottom gusset by selecting the holes on the tube.  6. Name the key sketches and parts. The materials will have already been set to 6061 Aluminum from the Featurescripts. 7. Insert the parts into the assembly by directly clicking on the green checkmark. Then, <code>Group</code> all the parts together. Finally, <code>fix</code> the bottom tube in place.  8. Copy and paste the gussets four times. Then, use the <code>Fasten</code> mate to attach the gussets to the tube.  9. Some gussets may need to have their <code>Fasten</code> mate reoriented in order to properly line up.  10. Finished assembly.  \u276e \u276f <p>In this exercise, you were introduced to yet another highly useful Featurescript for creating gussets. Additionally, notice that we only model 1 of each type of gusset in the part studio. For the tubes, we choose to model all of the tubes even though the two vertical tubes are the same - this is to make assembly more parametric since the tube would otherwise be difficult to mate.</p> <p>It should be noted that while fixing the tube is not considered an assembly best practice for setting the origin of an assembly, it is sufficient for the purposes of these exercises.</p>"},{"location":"design-guide/stage1/1A-onshapeFundamentals.html#exercise-4-climber-hook","title":"Exercise 4: Climber Hook","text":"<p>As you get more comfortable with modeling, we can begin to draw more complex parts. For this exercise, you will create a climber hook and tube. Then, you will create the assembly and mate together the components.</p> <p>You will utilize the <code>Spacer</code> Featurescript for this exercise.</p> <p>Exercise 4 Instruction Slides</p> 0. Final assembly. 1. Start by sketching the tube on the right plane. 2. Use the <code>Tube</code> Featurescript to create a thin-wall 1\"x1\" tube with no holes. 3. Draw the climber hook sketch. The construction geometry circle represents the bar on which the hook will grab onto. The hole on the far right would be to attach a rope to pull the hook with. Pay attention to the sketch constraints used. 4. Use the <code>Linear Pattern</code> sketch tool to pattern the mounting holes.  5. Make the hook 3/16\" thick. Select <code>New</code> as the extrude type to make the extrude a new part.   6. Fillet the bottom two corners with a 0.25\" radius. 7. Use the <code>Spacer</code> Featurescript to add a 0.5\" diameter spacer. Use the `Up to Face` end condition to make the spacer match the tube width.  8. Use the <code>Use</code> sketch tool to add the mounting holes to the tube.  9. Name the key sketches and parts. Set the material of the hook and spacer to 6061 Aluminum.  10. Finished assembly.  \u276e \u276f <p>In this exercise, you practiced more advanced sketching and were introduced to the <code>Spacer</code> Featurescript. </p>"},{"location":"design-guide/stage1/1A-onshapeFundamentals.html#summary","title":"Summary","text":"<p>Congratulations on completing Stage 1A! Remember, practice is essential \u2013 the more CAD models you create, the more proficient and efficient you'll become. Using keyboard shortcuts can significantly accelerate your CAD workflow. Be attentive to best practices to avoid developing any bad habits. Keep up the good work!</p> <p>Here is a quick summary of what you have achieved in 1A:</p> <ul> <li>Learned how to use the OnShape interface and basic sketching and modeling features with the OnShape Learning Center courses</li> <li>Learned how to model basic FRC structures</li> <li>Learned how to use the <code>Gusset</code>, <code>Extrude Individual</code>, <code>Tube Converter</code>, and <code>Spacer</code> Featurescripts</li> <li>Learned how to assemble basic models using <code>Group</code> and <code>Fasten</code></li> <li>Learned how to insert models into assemblies using the MKCad parts library</li> </ul> <p>In stage 1B, you will be introduced to power transmissions, which enable your robot to move and score. </p> <p></p>"},{"location":"design-guide/stage1/1B-powerTransmissions.html","title":"B: Power Transmissions","text":""},{"location":"design-guide/stage1/1B-powerTransmissions.html#1b-power-transmissions","title":"1B: Power Transmissions","text":""},{"location":"design-guide/stage1/1B-powerTransmissions.html#introduction","title":"Introduction","text":"<p>So far the models you have created are all structural components, but this is only half of what makes up a robot. In order to make our robots move and score, motors that generate rotational motion are typically utilized. In Stage 1B, you'll be introduced to modeling basic power transmissions. Power transmissions include the motors, bearings, shafts, gears, belts, and chains that are used to transform rotational motion from a motor to do just about anything. </p> <p>In this stage, you'll focus on the fundamentals of power transmissions, with an emphasis on how to model them in CAD. The process of selecting motors and calculating power transmission ratios is gone over in detail in the design fundamentals page about electronics, motors, and sensors and also explored later in Stage 2 of the guide with multiple different mechanisms.</p> <p>Below are some examples of power transmissions found in robots to achieve a range of different tasks.</p> <p>Power Transmission Examples</p>  Belt and gear power transmission to spin intake rollers.   Belt and gear power transmission to spin shooter wheels.  Gear and chain power transmission to rotate a small arm.   Gear and chain power transmission to rotate a large arm. \u276e \u276f <p>In this stage, there are exercises designed to practice modeling simple power transmissions in the form of stand alone gearboxes. In stage 2, you will begin to model more integrated power transmissions within mechanisms. Practice exercise solutions can be found here.</p>"},{"location":"design-guide/stage1/1B-powerTransmissions.html#motors","title":"Motors","text":"<p>Motors spin! They transform electrical energy supplied by the robot battery into rotational motion. From intaking to climbing to driving, just about anything on your robot can be moved with the right motor(s).</p> <p> Some of the motors available for use in FRC.</p> <p>In FRC, a number of different motor options are available, all with different advantages and use cases. The most common type of motor found in modern FRC is the \"CIM class\" motor. This includes the CIM, Mini-CIM, Vexpro Falcon 500, WCP Kraken x60, Rev NEO, and Rev Vortex. While each of the CIM class motors have different speeds and power, they have two traits in common for modeling:</p> <ul> <li>The motors' outer diameters can be represented with a 2.5\" diameter circle (some are slightly smaller at 60mm/2.362\").</li> <li>The motors' have anywhere from 2 to 11 holes for mounting, but all are on a 2\" diameter bolt circle (See below image). The holes are also 10-32 thread.</li> </ul> <p></p> Mounting holes for CIM class motors are on a 2\" diameter bolt circle. All of the holes are 1\" away from the center of the motor. <p>All of the exercises for this stage will use CIM class motors. </p>"},{"location":"design-guide/stage1/1B-powerTransmissions.html#shafts-and-bearings","title":"Shafts and Bearings","text":"<p>Shafts transmit rotational power along an axis, with hex shafts being the most common in FRC. These hexagonal shafts, typically in 1/2\" and 3/8\" diameters (measured from flat to flat), may sometimes have rounded corners, known as \"rounded hex\" or \"Thunderhex.\"</p> <p>Bearings allow shafts to spin independently of plates and/or things to spin independently of shafts. Standard hex shafts use 1/2\" hex bearings, while rounded hex shafts can use round bearings for easier assembly.</p> <p>Tip</p> <p>The easiest way to model shafts is to use the <code>Shaft</code> Featurescript. For bearings, insert your desired bearing from the MKCad app.</p> <p> A rounded 1/2\" hex bearing (Left) and 1/2\" rounded hex shaft (Right). (Image Source: WCP)</p>"},{"location":"design-guide/stage1/1B-powerTransmissions.html#torque-and-speed","title":"Torque and Speed","text":"<p>When designing power transmissions, there are two interlinked quantities that we are trying to modify: torque and speed. Torque refers to the rotational force applied to an object, while speed denotes how quickly that object rotates. In FRC, the unit used for speed is typically Rotations Per Minute (RPM). The units used for torque is typically Newton-Meters (Nm).</p> <p>Note</p> <p>Speed and torque are inversely related in mechanical systems. This means that as one increases, the other decreases, and vice versa. For example, if speed is decreased by 4x, torque is increased by 4x. This is because of the principle of conservation of energy: the output energy is the same as the input energy (ignoring losses like friction), so if speed is reduced through mechanical means, torque must increase.</p>"},{"location":"design-guide/stage1/1B-powerTransmissions.html#mechanical-advantage","title":"Mechanical Advantage","text":"<p>Many mechanical systems use the principle of the conservation of energy to convert energy from type to another, usually to produce larger forces or larger speeds with a set amount of force and speed at the beginning. Mechanical advantage is the ratio of output force to input force in a system, whether it's a lever, screw, gears, or pulley, mechanical advantage is used to quantify how the force changes.</p> <p>The ratio between the number of teeth of the input and output gear/sprocket/pulley system represents the mechanical advantage of that system. This is also called the gear ratio, and is the key to understanding how to achieve a needed torque or speed from the set torque and speed of a given motor.</p> <p>Gear ratio is typically written in the form <code>n1:n2</code>. Since torque and speed are interlinked quantities, the ratio can be understood from the perspective of torque or speed. From the perspective of torque, <code>n1</code> is the output torque for <code>n2</code> input torque. From the perspective of speed, <code>n1</code> is the speed of the input for <code>n2</code> speed of the output. </p> <p>Example</p> <p>A system has a gear ratio of 4:1. This means the output torque is 4x the input torque and that the output speed is 1/4 the input speed.</p> <p>For a single stage transmission (only two transmission components), <code>n1</code> is the size of the driven component for <code>n2</code> size of the driving component.</p>"},{"location":"design-guide/stage1/1B-powerTransmissions.html#ratio-applications","title":"Ratio Applications","text":"<p>An arm mechanism needs very low RPM but a lot of torque to control efficiently, so a large reduction of speed might be used to increase torque. This depends on the weight and length of the arm, but can be 30:1 up to even 200:1. </p> <p>Shooter wheels or intake rollers often have little to no reduction, and in some cases may even need to go faster than the motor's free speed. In this case, an upduction can be be used to increase the speed, but the output torque gets lower as a consequence. Upductions typically don't get much higher than 1:2 due to the available motors already having a high speed, low torque output. A 1:2 upduction would double the speed and halve the torque of the input.</p> <p>Tip</p> <p>For situations that require higher speed and higher torque than what a single motor can provide, add more motors.</p>"},{"location":"design-guide/stage1/1B-powerTransmissions.html#power-transmissions","title":"Power Transmissions","text":"<p>In FRC, the three most common types of power transmissions are gears, chain and sprocket, and belt and pulley. Although they all achieve the same end result of changing speed and torque, they each excel in different situations. In the following sections you'll be introduced to each of them and how to model them.</p> <p>Note</p> <p>Gears, sprockets, and pulleys all follow profile standards that specify how big the teeth are. This means that the ratio between the number of teeth and diameter of the part is a constant. There are different profile standards, but only parts of the same profile can be meshed or used together.</p>"},{"location":"design-guide/stage1/1B-powerTransmissions.html#gear-basics","title":"Gear Basics","text":"<p>Gears are mechanical devices with teeth that mesh with each other to transmit motion or power between rotating shafts. They're like wheels with teeth that fit together, allowing them to transfer torque, change speed, and change direction of rotation. </p> <p> A simple animation of two gears meshing. Notice that meshed gears will spin in opposite directions.</p> <p>In order to change the torque and speed from the input to output, different sized gears must be used. Remember that the ratio is related to the number of teeth of the gears. Teeth will always mesh together one by one, but the number of teeth per revolution is different for different sized gears, causing a difference in angular speed even if the surface speed of the gear is the same.</p> <p>Changing Speed and Torque with Gears</p> 1. A 12T gear drives an 84T gear. The gear ratio is 84:12, which can be simplified to 7:1. The torque is increased by 7x while the speed is reduced to 1/7 of the original speed. (Image source: WCP) 2. A 48T gear drives an 24T gear. The gear ratio is 24:48, which can be simplified to 1:2. The torque is reduced to 1/2 of the original torque while the speed is increased by 2x. (Image source: WCP) 3. If the same size gears are used, there is no change in speed and torque. However, the direction of the rotation is flipped if there is an even number of gears from input to output. If there is an odd number of gears, the direction remains the same. (Image source: WCP) \u276e \u276f <p>Center to Center Calculation </p> <p>To calculate how far apart to space the gears, you can use the following formula to calculate the center-to-center distance:</p> <p><code>CC = 0.5*PD1 + 0.5*PD2</code></p> <p>Where <code>PD1</code> and <code>PD2</code> are the Pitch Diameters of the two gears. The Pitch Diameter (PD)  is the size of the imaginary circle that passes through the center of the gear teeth. The pitch diameters of two gears should be tangent in order for the gears to properly mesh. The equation for PD is as follows:</p> <p><code>PD = (# of teeth) / DP</code></p> <p>Where DP stands for Diametrical Pitch. For now, you can assume it to always be 20. If you're curious, you can learn more about this in the Design Fundamentals pages.</p> <p> Illustration of a gear's pitch diameter and outer diameter. (Image source: WCP).</p> <p>Modeling Gear Transmissions</p> <p>When modeling, an easy way to set the center-to-center distance between two gears is to draw two circles sized to the gears' pitch diameters and then set two circles to be tangent to each other. For example, if you need to mesh a 20T gear and a 60T gear, you can draw a <code>20/20 = 1\"</code> and a <code>60/20 = 3\"</code> circle and add a tangent constraint between the two circles. The reason we enter the full expression is so that we can easily see what the circle represents (a gear, sprocket, or pulley, and how many teeth it has).</p> <p></p> Modeling gear C-C distance by constraining two pitch diameter construction circles tangent. The diameters of the circle are calculated by dividing the tooth count by DP, which is 20 in this case. <p>It's recommended to input the pitch diameter fraction (Eg: <code>(60/20)\"</code>) rather than the calculated pitch diameter (Eg: Only inputting <code>3\"</code> as the dimension) so that you can easily see the tooth count of the designed gear. </p>"},{"location":"design-guide/stage1/1B-powerTransmissions.html#exercise-1-simple-gearbox","title":"Exercise 1: Simple Gearbox","text":"<p>In this exercise, you will be CADing and assembling a simple single stage gearbox. Practice exercise solutions can be found here.</p> <p>The goal of this exercise is to introduce how to model a very simple gear transmission. Additionally, you will learn how to use the the <code>Shaft</code> Featurescript, <code>Replicate</code> tool, MKCad parts library, and part configurations.</p> <p>Note</p> <p>Exercise 1 adds hardware (bolts and nuts) to the CAD models. You can read more about hardware standards on the Design Fundamentals page.</p> <p>Tip</p> <p>To lock mate inferences when you see the one you want to select, hold the <code>Shift</code> key when mousing. This is particularly useful for mating the motor pinion gear.       Your browser does not support the video tag.    Using Shift key to lock mate inferences while mating.</p> <p>Exercise 1 Instruction Slides</p> 0. Final assembly.  1. Begin by creating the layout sketch for the gearbox. Draw the pitch circles for the 60T and 12T gears. Set the pitch circles tangent to constrain the center-to-center distance between the gears. Constrain the centers of the two gears to be vertical.  2. Add the outline of the motor, a 2.5\" diameter circle, around the 12T gear that the motor is attached to. The layout sketch is now finished.    3. Create a new sketch for the motor plate. Using the layout as the reference, draw a 1.125\" hole for the bearing and a 0.8\" hole for the motor boss (the nub that sticks out from the motor). Note that depending on your manufacturing processes and tolerances, you may need to draw your bearing holes slightly larger or smaller than nominal (1.125\").   4. Add two mounting holes for the motor. A good practice to constrain the holes is to draw and dimension a bolt circle, then draw the holes for the bolts on the bolt circle. This constrains the distance of the holes from the center of the motor with a single dimension. The bolt circle for the motor we are using is 2\".    5. Add the four bolt holes for connecting the two plates. Use a center rectangle to create the construction geometry so that only two dimensions are required to constrain the holes.      6. Using centerpoint arcs, lines, and the sketch mirror tool, draw the outline for the plate around the holes and motor outline.   7. Extrude the motor plate to be 1/4\" thick.   8. Use the <code>Spacer</code> Featurescript to add a round 3/8\" diameter, 5/8\" long spacer.   9. Create the outer plate sketch on the face of the spacer. Use the <code>Use</code> sketch tool to copy the geometry and holes of the motor plate, but add a round cutout at the top. 10. Extrude the outer plate to be 1/4\" thick.          Your browser does not support the video tag.        11. Use the <code>Shaft</code> Featurescript to model the output shaft. Follow the settings used. You can learn more about the shaft retention property on the Design Fundamentals page.   12. Finished part studio. Name the key sketches and parts. Set the material of the plate and spacers to 6061 Aluminum. The shaft has its material automatically determined from the <code>Shaft</code> Featurescript.          Your browser does not support the video tag.         13. Insert the part studio into the assembly and fix the gearbox plate. Group mate the two plates together and then mate the spacer to the motor plate. Then, use the <code>Replicate</code> tool to replicate the spacer and its associated mate onto the other spacer locations.           Your browser does not support the video tag.         14. Assemble the bearings and shaft using parts from the MKCad App.          Your browser does not support the video tag.         15. Assemble the motor and motor pinion gear using parts from the MKCad App.           Your browser does not support the video tag.         16. Assemble the shaft spacer and gear using parts from the MKCad App. Configurable parts will have a blue grid icon in the instance list. Notice how you were able to change the tooth count of the gear from 40T to 60T after mating it. Using configurable components like this makes your models more parametric since you can change the component without needing to re-insert and mate.           Your browser does not support the video tag.         17. Assemble the shaft retention bolts using the MKCad app parts.           Your browser does not support the video tag.         18. Assemble the motor bolts, gearbox bolts, and nuts using the Onshape Standard Content and MKCad app parts. When inserting Onshape Standard Content, you can use the snap mode to automatically add the mates when inserting or insert the component and then manually mate it.  19. Finished assembly. Make sure to sort your parts into folders and name your replicate features.  \u276e \u276f <p>In this exercise you made your first gearbox. In doing so, you also used part configurations - a powerful tool that allows for variations of the same part. The gears that you inserted from MKCad were configurable - you were able to easily change the tooth count of the gear without needing to inserting a new component.</p>"},{"location":"design-guide/stage1/1B-powerTransmissions.html#exercise-2-two-stage-gearbox","title":"Exercise 2: Two Stage Gearbox","text":"<p>In this exercise, you will be CADing and assembling a two stage gearbox. Practice exercise solutions can be found here.</p> <p>The goal of this exercise is to practice modeling more advanced gearboxes. You will also learn how to use the <code>Vent</code> Featurescript used for pocketing.</p> <p>Exercise 2 Instruction Slides</p> 0. Final assembly. 1a. Create the layout sketch for the gearbox. Start by drawing the 2nd stage, which is a 20T gear to a 50T gear. 1b. Draw the first stage, which is a 12T motor pinion gear to a 50T gear. 1c. Draw the outline of the motors as a 2.5\" diameter circle. This is the finished layout sketch for the gearbox. 2. Create a new sketch to draw the profile of the plate. Add the bearing holes, which are 1.125\" diameter holes, as well as the motor boss holes, which are 0.8\". Also add the motor mounting holes. You can utilize the <code>Mirror</code> sketch tool to mirror the geometry from the left side to the right side.  3. Extrude the plate to be 1/4\" thick. 4. Use the <code>Spacer</code> Featurescript to create the gearbox spacer.  5. Use the <code>Shaft</code> Featurescript to create the first stage shaft.  6. Use the <code>Shaft</code> Featurescript to create the output shaft. 7. Create a sketch on the face of the plate and draw the lines for the pocketing ribs.  8. Use the <code>Vent</code> Featurescript to pocket the plate by selecting the sketch regions created by the previous sketch.  9. Finished part studio. Name the key sketches and parts. Set the material of the plate and spacers to 6061 Aluminum.  10. Insert the part studio into the assembly and fix only the gearbox plate. Mate the spacer to the plate. Then, use the <code>Replicate</code> tool to replicate the spacer and its associated mate onto the other spacer locations.  11. Copy the gearbox plate and mate it into place.  <li>          Your browser does not support the video tag.        12. Assemble the bearings and shafts using parts from the MKCad App.  </li> <li>          Your browser does not support the video tag.        13. Assemble the motor and motor pinion gear using parts from the MKCad App.  </li> <li>          Your browser does not support the video tag.        14. Assemble the shaft spacers and gears using parts from the MKCad App.  </li> <li>          Your browser does not support the video tag.        15. Assemble the shaft retention bolts, motor bolts, gearbox bolts, and nuts using the Onshape Standard Content and MKCad app parts.  </li> 15. Finished assembly. Make sure to sort your parts into folders and name your replicate features.  \u276e \u276f <p>In this exercise, you practiced more complex gearbox modeling and mating together larger assemblies. </p>"},{"location":"design-guide/stage1/1B-powerTransmissions.html#belts-and-pulley-basics","title":"Belts and Pulley Basics","text":"<p>Timing belt and pulley drives are mechanical systems used to transmit motion and power between rotating shafts using flexible belts and pulleys. The system consists of two main components: the belt, which is a flexible loop made of a material like rubber, and the pulleys, which are wheels with grooves that the belt wraps around. As one pulley rotates, it drives the belt, which in turn drives the other pulley, transferring motion and power from one shaft to another</p> <p> A belt and pulley transmission. (Image Source: ReCalc)</p> <p>In order to change the torque and speed from the input to the output, different sized pulleys must be used. For belt transmissions, the gear ratio is the number of teeth on the output pulley to the number of teeth on the input pulley. This ratio is the mechanical advantage of the system. Note that unlike gears, pulleys will spin in the same direction.</p> <p>Types of Belt</p> <p>Like gears, belts also have a pitch. The pitch is defined as the distance between each tooth on the belt. In FRC, this is typically 5 mm. To calculate the pitch diameter of a pulley, the following equation can be used:</p> <p><code>PD = Pitch * (# of Teeth) / 3.14</code></p> <p>Belts also come in various widths. In FRC, you will typically use either 9 mm or 15 mm wide belts.</p> <p>Center to Center Calculation</p> <p>To calculate the center-to-center distance of the pulleys, it is recommended to use an online calculator, such as ReCalc. In the calculator, you can set the belt pitch, desired center distance, and the number of teeth on each pulley to get the closest integer belt size  (belt tooth counts must be whole numbers) and corresponding center to center distance.</p> <p>Modeling Belt Transmissions</p> <p>When modeling, you will typically draw either the pitch diameter of the two pulleys and connect them with tangent lines to represent the belt. A simplified 3D model of the belt can be generated using the <code>Contextless Belts</code> Featurescript from Julia's Featurescripts.</p> 1. Use ReCalc to find the closest belt size to the desired C-C distance. Set the pitch diameter and select the closest smaller or larger belt, whichever fits your design better. 2. Draw two circles to represent pulley pitch diameters and connect them with tangent lines. Set the center distance with the calculated number from ReCalc. 3. Use the <code>Contextless Belts</code> Featurescript to generate a 3D model of the belt. \u276e \u276f"},{"location":"design-guide/stage1/1B-powerTransmissions.html#chain-and-sprocket-basics","title":"Chain and Sprocket Basics","text":"<p>Roller chain and sprocket drives are very similar to belt and pulley transmissions. They consist of two main components: a chain, which is a series of interconnected links, and sprockets, which are toothed wheels that mesh with the chain. As the sprockets rotate, they engage with the chain, causing it to move and transmit power from one shaft to another. Bikes are an everyday object that use chain to transmit power. Chains excel at transmitting high force over long distances.</p> <p> A simple animation of chain and sprocket. Notice that the sprockets will spin in the same direction.</p> <p>In order to change the torque and speed from the input to the output, different sized sprockets must be used. For chain transmissions, the gear ratio is the number of teeth on the output sprocket to the number of teeth on the input sprocket. This ratio is the mechanical advantage of the system. Similar to pulleys, the sprockets will spin in the same direction.</p> <p>Types of Chain</p> <p>The two commonly used sizes of roller chain in FRC is #25 and #35 chain, with 0.25\" and 0.375\" pitch respectively. For chain, the pitch is the length of each link. To calculate the pitch diameter, the following equation can be used:</p> <p><code>PD = Pitch * (# of Teeth) / 3.14</code></p> <p>Additionally, the chain clearance diameter describes the diameter of the sprocket with the chain wrapped around it. The following equation can be used:</p> <p><code>Clearance Diameter = PD + Pitch</code></p> <p>Below is an illustration of the pitch, pitch diameter, outside diameter, and chain clearance diameter of a sprocket.</p> <p> Illustration of chain sprocket diameter measures. (Image source: WCP)</p> <p>In FRC, #25 chain is most commonly used as it is strong yet relatively lightweight. #35 is sometimes used on very high torque transmissions, but it is heavy and bulky. </p> <p>Center to Center Calculation </p> <p>Calculating sprocket center-to-center is very similar to pulley center-to-centers. To calculate the center-to-center distance of the sprockets, it is recommended to use an online calculator, such as ReCalc. In the calculator, you can set the chain size, desired center distance, and the number of teeth on each sprocket to get the required center distance.</p> <p>When modeling, you will typically draw either the pitch diameter or chain clearance diameter of the two sprockets and connect them with tangent lines to represent the links. A simplified 3D model of the chain can be generated using the <code>Chain Generator</code> Featurescript from Julia's Featurescripts. The modeling workflow is very similar to belt and pulley.</p> <p>Modeling Chain Transmissions</p> 1. Use ReCalc to find the closest C-C size to the desired C-C distance. Set the pitch diameter and select the closest smaller or larger chain link count, whichever fits your design better. 2. Draw two circles to represent sprocket pitch diameters and connect them with tangent lines. Set the center distance with the calculated number from ReCalc. 3. Use the <code>Chain Generator</code> Featurescript to generate a simplified 3D model of the chain. \u276e \u276f <p>Chain Tensioners</p> <p>One difficulty when designing with chain is that it will physically stretch as it is used. This means the distance between each link will slightly increase, making the overall chain longer in a non-insignificant way. Loose chain can be difficult to fix if the chain transmission is not designed with chain tensioning in mind. Although you will not be learning about chain tensioning methods quite yet, you should keep this idea in the back of your mind. In Stage 2, different chain tensioning methods are introduced in the context of different types of robot mechanisms. The Design Fundamentals page also dives deeper into this topic.</p> <p></p> A \"turnbuckle\" chain tensioner. The turnbuckle acts as a variable-length link in the chain that can be adjusted to keep the chain tight. (Photo Credit: FRC 1538)"},{"location":"design-guide/stage1/1B-powerTransmissions.html#exercise-3-belt-and-gear-transmission","title":"Exercise 3: Belt and Gear Transmission","text":"<p>In this exercise, you will be modeling a two stage gearbox that uses gears and belts. This gearbox will also include elements like frame and gussets, which you previously learned in Stage 1A. Practice exercise solutions can be found here.</p> <p>The goal of this exercise is to continue to ramp up your modeling skills. Always make sure to fully define your sketches and keep your feature and instance trees organized. </p> <p>Exercise 3 Part Studio Instruction Slides</p> 0. Final part studio. 1. Draw the tube profiles for the frame. There is a an 1/8\" gap between the slanted tube and the vertical tube to allow for assembly tolerances.  2. Use the <code>Extrude Individual</code> Featurescript to extrude the tube profiles. 3. Use the <code>Tube Converter</code> Featurescript to convert the rectangles into hole patterned 1x1 thin-wall tube (1/16\" thick wall). 4. Use the <code>Gusset</code> Featurescript to add a corner gusset between the lower two tubes. 5. Create the gearbox layout sketch on the outer face of the bottom tube. Begin by drawing the two gears, a 60T and 20T gear. The 60T gear is the output, and we would like to constrain it to a specific location given by the 2\" and 4.5\" dimensions. 6. Next, draw the 5mm pitch 12T and 36T pulleys. Use a line to connect the two pulleys. Pay attention to the expressions that were entered to calculate the pitch diameters of the pulleys. Also space the 36T pulley to be 0.25\" from the vertical tube. This step fully constrains the location of the gears. 7. Use a belt c-c calculator (eg: reca.lc) to calculate the pulley c-c. In this example, we know we have a 60T belt on hand, so we would like to use that specific belt in the design. The belt we are using is 5mm pitch. 8. Add the calculated c-c to the layout sketch. 9. Optionally draw two tangent lines to connect the two pulley circles. This represents the belt. 10. Finally, sketch a 2.5\" circle for the motor. Space the motor to be 1/8\" away from the slanted tube. The layout sketch is now fully defined. 11. Create the plate sketch on the outer face of the bottom tube. Begin by drawing the two 1.125\" diameter bearing holes. Add a 0.95\" for the bearing boss instead of the standard 0.8\" so that the 12T pulley on the motor can fit through the hole to assist with real life assembly. This will become more clear when you create the gearbox assembly. 12. Add a 2\" bolt circle for the motor. Constrain the center of the top left hole to be coincident with the center line between the pulleys.  13. Add the tube mounting holes for the plate. Note that the holes reference the edges of the tube and not the holes on the tube. This is to make the model more parametric, as changes in the tube can change the locations of the holes and break the gearbox plate sketch. 14. Draw the outline for the plate. Space the bottom of the plate 0.25\" from the edge of the pitch circle for the 60T gear.  15. Add two holes for spacers. The construction circles represent the 3/8\" diameter spacer. The top hole is tangent with the left edge of the plate and tangent with the 2.5\" motor circle. 16. Extrude the plate to be 1/4\" thick. 17. On the opposite side, create a sketch for the inner plate. Utilize the <code>Use</code> sketch feature to copy over common geometry (holes, outline). Do not copy the motor holes, as there will be a cutout on the inner plate for the body of the motor. 18. Finish the outline of the plate by adding an arc for the motor cutout. 19. Extrude the inner plate to be 1/4\" thick. 20. Add a 3/16\" radius fillet on the two edges for the motor cutout. The radius is selected to match the 3/8\" diameter spacer. 21. Model the 3/8\" diameter spacer. The <code>Up to Face</code> end condition can be utilized to keep the spacer length parametric. 22. Use the <code>Contextless Belt</code> Featurescript to create a simplified model of the belt. The pitch of the belt is 5mm and the width is 9mm.   23. Use the <code>Shaft Generator</code> Featurescript to create the 1st stage shaft. Note that this length is simply an estimate. While you could calculate the length of the shaft based on the components that will go on it, it is often easier to create the assembly then measure what the shaft length should be and update accordingly. 24. Use the <code>Shaft Generator</code> Featurescript to create the output shaft. 25. Optionally pocket the plates. To begin, create a sketch on the outer face of the motor plate and draw lines to create the struts. 26. Use the <code>Vent</code> Featurescript to add the pocketing. Use 0.15\" wide ribs and 0.15\" tool radius.  27. Create a sketch on the inner plate and draw the strut lines. You can utilize the <code>Use</code> sketch feature to copy over strut lines from the motor plate pocketing sketch. 28. Use the <code>Vent</code> Featurescript to add the pocketing. Again, uUse 0.15\" wide ribs and 0.15\" tool radius.  29. Finished part studio. Name the key sketches and parts. Set the material of the plate and spacers to 6061 Aluminum. The tube, gusset, and shafts should have their material automatically set already.  \u276e \u276f <p>Exercise 3 Assembly Instruction Slides</p> 0. Final assembly.          Your browser does not support the video tag.        1. Insert the part studio into the assembly and fix only the bottom tube. Use the group mate on the tubes, plates, and gusset. Copy the gusset and mate it to the other side of the tube. Next, mate the spacer to the plate and use the <code>Replicate</code> tool to replicate the spacer.           Your browser does not support the video tag.        2. Assemble the bearings and shafts using parts from the MKCad App. Use the <code>Replicate</code> tool to replicate the bearing.          Your browser does not support the video tag.        3. Assemble the 36T pulley, belt, motor, and motor pinion pulley using parts from the MKCad App. Notice that the motor pinion is offset 1/16\" from the bottom of the shaft to better align with the belt. Additionally, notice that the belt requires only a single fasten mate since its orientation was determined by how it was modeled in the part studio.          Your browser does not support the video tag.        4. Assemble the shaft spacers and gears using parts from the MKCad App. Notice that this time we used a pocketed gear for the 60T gear. Pocketed gears are the same as normal gears except they have some material removed to save weight.           Your browser does not support the video tag.        5. At this point, you have all of the core components assembled and can update the length of the first stage shaft. Copy the measured shaft length and update the part studio accordingly. It is recommended to round up to the nearest 0.01\" for manufacturability.           Your browser does not support the video tag.        6. Assemble the shaft retention bolts using MKCad app parts.          Your browser does not support the video tag.        7. Assemble the motor bolts, gearbox bolts, and nuts using the Onshape Standard Content and MKCad app parts          Your browser does not support the video tag.        8. Assemble the gusset rivets using the MKCad app parts. 9. Finished assembly. Make sure to sort your parts into folders and name your replicate features.  \u276e \u276f <p>In this exercise, you modeled a fairly complex gearbox that was integrated with some frame elements. At this point, you should be begin to feel comfortable with the sketching and extrude tools. You should also familiarize yourself with all the options present in the Featurescripts that you have used up until this point by playing around with different settings. </p> <p>To get a feel for how parametric your model is, you can try and change certain key dimensions in the layout sketches, such as the length of the tubes, angle of the tubes, length of the belt, and the size of the gears. Play around with which modifications will update smoothly and which require additional fixes in the CAD.</p> <p>You may also be curious as to how things like the hole sizes, materials, etc were selected in each of these designs. You are encouraged to learn more by browsing the Design Fundamentals pages which contain in-depth information on a wide range of topics, or by discussing with your team and or other students and mentors on the DDS Discord.</p>"},{"location":"design-guide/stage1/1B-powerTransmissions.html#summary","title":"Summary","text":"<p>Congratulations on completing Stage 1B! Keep up the good work! Remember that practice is key - the only way to get better is to model more.</p> <p>Here is a quick summary of what you have achieved in stage 1B:</p> <ul> <li>Learned about speed, torque, and mechanical advantage</li> <li>Learned the basics of motors, bearings, shafts, gears, chain and sprockets, and belt and pulleys</li> <li>Learned how to model basic power transmissions</li> <li>Learned how to use the <code>Contextless Belt</code>, <code>Chain Generator</code>, <code>Shaft</code>, and <code>Vent</code> Featurescripts</li> <li>Learned how to insert Standard Library components and mate bolts and nuts</li> <li>Learned how to use the <code>Replicate</code> tool</li> </ul> <p>Again, it should be noted that Stage 1B is a very basic introduction to modeling power transmissions and some details were glossed over. Stage 2 will introduce how to design power transmissions - selecting motors and calculating optimal ratios. For future reference, you can refer to the Design Fundamentals power transmissions pages, which are more in depth.</p> <p>In stage 1C, you will begin to learn the basic workflow for robot modeling. This is the final step before being able to design a full mechanism!</p> <p></p>"},{"location":"design-guide/stage1/1C-designMethodology.html","title":"C: Design Methodology","text":""},{"location":"design-guide/stage1/1C-designMethodology.html#1c-design-methodology","title":"1C: Design Methodology","text":""},{"location":"design-guide/stage1/1C-designMethodology.html#introduction","title":"Introduction","text":"<p>So far, you've worked on CAD fundamentals through courses and FRC-relevant exercises, but haven't done anything within a larger context. In Stage 1C, you'll dive right into designing for a real robot. In this project, you will be designing a swerve drivebase while being introduced to a design workflow that will be applied to all future projects. </p> <ol> <li>Learn the basics of top-down design and mastersketching</li> <li>Model a swerve drivebase using COTS swerve modules</li> <li>Create a top-level assembly and insert a pre-modeled mechanism (1678's 2023 elevator and manipulator) </li> </ol> <p>Even if you've already CADed a drivetrain the past, this guide serves as an excellent introduction to the top-down master sketch design methodology.</p> <p> Swerve drivebase with pre-modeled mechanism</p> <p>As with previous exercises, the finished project is available for reference here. If you need help, please feel free to ask on the Discord!</p>"},{"location":"design-guide/stage1/1C-designMethodology.html#master-sketch-methodology","title":"Master Sketch Methodology","text":"<p>When designing a model in CAD, there are two high level strategies that can be employed: top-down and bottom-up. Top-down design employs high level, low detail sketches to dictate the design, and then refining details and components within that framework. Conversely, bottom-up design involves creating individual components or parts separately and then assembling them to form the final product. </p> <p>Top-down design offers a holistic approach, allowing for better system integration, consistency, and is more parametric. Bottom-up design offers flexibility and independence in designing individual parts. In FRC robot design, top-down approach is favored as system integration is often the most challenging aspect. Top-down ensures that the robot architecture dictates part design.</p> <p>To achieve this, a master sketch is utilized. A master sketch is a series of sketches that capture the major dimensions of each mechanism, field element interactions, and robot size constraints. Then, the master sketch(es) are inserted into each mechanism's part studio and the individual components are then modeled around the imported layout sketch. More information on master sketches can be found on the Master Sketch Best Practices page.</p> <p> Example of robot master sketches. Each mechanism has a number of layout sketches that capture the important details.</p>"},{"location":"design-guide/stage1/1C-designMethodology.html#swerve-drivebase","title":"Swerve Drivebase","text":"<p>A drivebase is the mobile platform on which all our other mechanisms are designed around and attached to. With the advent of COTS swerve, designing a swerve drivebase has been made significantly easier and has become the most commonly used competitive drivetrain in FRC. </p> <p>A swerve drivebase is composed of four swerve modules. Each module has 2 motors: 1 for spinning the wheel and one for steering it. This enables the robot to translate in any direction independent of the rotation of the robot. There are many other COTS options available, each with their own advantages and tradeoffs. In this project, we'll be using SDS MK4i modules. You can learn more about drivetrains on the Design Fundamentals page.</p> <p> Stage 1C swerve drivebase project.</p> <p>As was introduced in Stage 1A, robot structures are typically constructed out of aluminum box tubing. The drivebase is no exception to this. Most teams will opt to design their box tubing with a standard 0.5\" spacing pattern of 0.196\" diameter holes. This enables modularity and allows for easy integration of many COTS components like gussets.</p> <p>Box tubing extrusions can be purchased at most metal suppliers, but many FRC vendors including WCP, TTB, and REV sell box tubing with pre-cut hole patterns which can significantly reduce manufacturing time and equipment requirements.</p>"},{"location":"design-guide/stage1/1C-designMethodology.html#drivetrain-master-sketches","title":"Drivetrain Master Sketches","text":"<p>To begin, you will be creating a layout sketch of the drivetrain. This will dictate the size and position of the drive tubes. The layout will be drawn from the side and top view of the drivetrain. For your swerve drivebase, you will make it 26\"x26\".</p> <p>Start by creating a part studio called <code>Master Sketch</code>. Then, use the <code>Origin Cube</code> Featurescript to create an origin cube. You should start every part studio with an origin cube to set a reference for the origin of the robot. The origin of the robot is typically defined as the center of the drivebase on ground level. You can learn more about origins and the origin cube in Assembly Best Practices.</p> <p>Drivetrain Layout Sketch Slides</p> 0. The final layout sketch. 1. Start by inserting the origin cube. 2. Draw the side profile of the drivetrain on the Right Plane. We place the tube 1.75\" from the ground, which is the offset from the ground to the bottom of the tube for the MK4i modules. 3. Draw the wheel clearance box, which represents the area that the wheel takes up. For the MK4i modules, the box is 4.625\" wide. The side layout of the drivebase is now finished. 4. Create the top layout sketch by using the bottom mate connector on the vertical line of the side layout. Utilizing auto-generated mate connectors for sketch planes is a very useful tool to have. Press the \u201cTop\u201d button on the view cube to get a top view. 5. Sketch the top outline of the drive base. Make the rectangle a square and set the side length equal to the length of the side layout tube. This ensures that the size of the top layout always matches the side layout, which makes the design parametric. Notice that the sketch is fully defined despite having no sketch dimensions. 6. To sketch the tubes, draw a square 1\" smaller than the previous square. This will represent the four 2\"x1\" tubes that make up the outer frame. Then, draw the top profile of the 2\"x2\" tube. 7. Next, we need to make the cutouts on the drivetube for the swerve modules. Start by drawing two lines, each offset by 4.25\" from the edge. This is the required offset for MK4i modules. Other modules will differ. 8. To apply the cutout for all four tubes, we use the <code>Circular Pattern</code> sketch tool to copy the lines to all four corners. For a  <code>Circular Pattern</code> we first define the number of instances and then the axis of rotation. 9. Finally, name your sketches and organize them into folders in the feature tree. Your sketches should all be fully defined. \u276e \u276f <p>As previously explained, this method of top-down modeling is extremely powerful as it enables you to capture the most important dimensions all in one place. However, you should be careful to not over-detail master sketches. Besides the page on master sketches, you will be practicing master sketches all throughout Stage 2, and use them in Stage 3 alongside multi-document practices to design a whole robot.</p>"},{"location":"design-guide/stage1/1C-designMethodology.html#deriving-layout-sketches-and-part-modeling","title":"Deriving Layout Sketches and Part Modeling","text":"<p>Now that you have created the layout sketch, you can begin modeling the individual parts. The critical dimensions of the parts, such as the length of the tubes, will be driven by the layout sketch. This way, the tubes will automatically update with any changes in the size of the drivebase in the layout sketch.</p> <p>Start by creating a new folder tab called <code>Drivetrain</code>. Then, create a new part studio called <code>Drivetrain</code> within the folder.</p> <p>Drivetrain Part Modeling</p> 0. The part studio. 1. Start by inserting the origin cube. Then, use the <code>Derived</code> tool to insert the layout sketches you previously drew from the Master Sketch part studio. This feature will automatically update if changes are made to the layout sketch. 2. Use the <code>Extrude Individual</code> and <code>Tube Converter</code> Featurescripts to model the tubes. The 2\"x1\" tubes should be 1/8\" wall for strength, while the 2\"x2\" tube can be 1/16\" wall. 3. Start with one corner of the bellypan. The corner is cut out to create room for the swerve module.  4. Use the <code>Fillet</code> sketch tool to add a 1\" radius sketch fillet on the two internal corners of the cutout.  5. Next, use the <code>Circular Pattern </code> sketch tool to pattern the other three corners. Extrude the bellypan to be 1/8\" thick. 6. Use the <code> Fillet All Edges</code> Featurescript to add a 0.25\" radius fillet to the remaining edges on the bellypan by selecting the bottom face of the bellypan. 7. Add the seed instances of the holes for the bellypan. 8. Next, use the <code>Linear Pattern</code> sketch tool to pattern the holes along the edge. 9. Use the <code>Circular Pattern</code> sketch tool to pattern the holes about the origin onto all four edges. 10. Use the <code>Linear Pattern</code> sketch tool to pattern the holes for the 2\"x2\" tube. 11. Clean up the sketch by moving the dimensions so that they are all visible. A clean sketch is important for readability of the CAD so that it is easily editable in the future. 12. Finally, name your sketches and organize them into a folder in the feature tree. Additionally, set the material of the bellypan to Aluminum 6061 and name your parts. \u276e \u276f <p>In this section, you were introduced to the <code>Derived</code> feature. This feature is extremely powerful and can be used to import parts from one part studio into another to enable references for modeling. However, you must be careful to not overuse this function as it can significantly slow down your part studios.</p> <p>At this point, you should be feeling more and more comfortable with Onshape modeling and using Featurescripts. Always make sure to clean up your feature tree while working to keep it organized and easy to use. You can learn about feature tree organization on the Feature Tree Best Practices page.</p>"},{"location":"design-guide/stage1/1C-designMethodology.html#assembly","title":"Assembly","text":"<p>Now that the part studio is finished, you can create the drivetrain assembly. Create a new assembly tab called <code>Drivetrain Assembly</code> in the <code>Drivetrain</code> folder you made previously. </p> <p>Previously, in Stage 1A when you created assemblies one of the parts in the group mate was fixed in place. However, this is not considered a good practice as it is not parametric. This is where the origin cube comes in: the origin cube has a mate connector placed at the origin of the part studio. After inserting and grouping all of the parts, you can fasten the origin cube to the origin of the assembly. This aligns the part studio origin and assembly origin.</p> <p>Drivetrain Assembly</p> 0. The assembly. 1. Insert the parts into the assembly, <code>Group</code> them, then fasten the origin cube to the origin of the assembly.          Your browser does not support the video tag.        2. Insert the MK4i module from the MKCad app into the assembly and mate it into place.  3. Use the <code>Circular Pattern</code> assembly tool to finish assembling the modules.           Your browser does not support the video tag.        4. Insert a 3/16\" rivet from the MKCad app into the assembly and mate it.  5. Use the <code>Replicate </code> assembly tool to replicate the rivet and rivet mate onto all matching geometry on the bottom face of the bellypan 6. The assembly. \u276e \u276f <p>The <code>Replicate</code> tool, which was introduced in Stage 1A exercise 5, is a very powerful tool for duplicating parts in assemblies. <code>Replicate</code> works by creating a copy of the selected parts, and duplicates the selected mate onto the selected geometry. Note that the selected geometry must exactly match the origin mate geometry, eg: the hole diameter must be the same for replicate to copy a rivet. In your assembly, you use the select the face for replicate to apply to. What this does is identify all geometry that matches the original mate and then copy the selected components and mate to those matching locations on the selected face. If you want to replicate onto only specific holes, you can change the drop-down menu to \"Match Individual Edges\".</p> Match Individual Edges for Replicate  Using \"Match Individual Edges\" allows us to select specific holes to replicate to instead of every hole on the face of the gusset.  <p>Adding More Components</p> <p>When you model more parts in the part studio, you can insert them into the assembly in a similar to fashion to before. Hit insert and immediately click on the green checkmark. Then, edit the initial <code>Group</code> you made and add the part to the group. By doing this, you ensure that added parts will always stay in the same place it was modeled in the part studio.</p> <p>Let's add a gusset to connect the 2\"x2\" tube to the 2\"x1\" tube.</p> <p>Adding a Gusset</p> 0. Finished drivetrain assembly. 1. Add the gusset for the crosstube with the <code>Gusset</code> Featurescript. 2. Insert the gusset into the assembly and add it to the <code>Group</code>. 3. Copy the gusset and mate it to the other side.  4. Edit the replicate feature to add rivets to the gusset.  4. Finished drivetrain assembly. \u276e \u276f <p>Make sure you sort the instances in your assembly into folders (i.e. frame, swerve modules) and name any patterns and replicates used. This will help you locate components in the assembly later down the line.</p> <p>More details about best practices for Onshape assemblies are included on the Assembly Best Practices Page.</p> <p>It should be noted that while modeling every detail of the robot hardware (bolts, rivets, nuts) is beneficial for purchasing and real life assembly purposes, it isn't strictly necessary. Time is a precious resource, especially during build season, so you should spend it on what will give you the biggest return.</p>"},{"location":"design-guide/stage1/1C-designMethodology.html#top-level-robot-assembly","title":"Top Level Robot Assembly","text":"<p>Now that you have a drivebase, you can create a top level robot assembly. The top level robot assembly is the highest in the assembly hierarchy. Organizing the assemblies in this way keeps thing organized from both a CAD assembly and real life assembly standpoint. </p> <p>Create an assembly tab above the <code>Master Sketch</code> part studio and name it <code>Top Level Robot Assembly</code>. Here, you will bring in the drivebase and the scoring mechanism from 1678's 2023 robot.</p> <p>Copy this link to access the scoring mechanism.</p> <p>Top Level Robot Assembly</p> 0. Finished top level robot assembly.          Your browser does not support the video tag.        1. Insert the drivetrain assembly and fasten the origin cube to the assembly origin. You may need to unhide the origin cube to mate it.          Your browser does not support the video tag.        2. Insert the 1678 2023 scoring assembly by pasting the scoring mechanism link into the `Insert` menu textbox. Then, fasten its origin cube to the assembly origin. You may need to hide the drivetrain's origin cube to access the origin of the assembly for mating. 3. Finished top level assembly.  \u276e \u276f <p>And that's all there is to the top level robot assembly! The use of the origin cube makes it very easy to mate together assemblies. In later stages you will explore how to create flexible assemblies (arms, elevators, etc) with the origin cube. If you are interested, you can get a sneak peek here.</p>"},{"location":"design-guide/stage1/1C-designMethodology.html#summary","title":"Summary","text":"<p>Congratulations on completing Stage 1C! Keep up the good work!</p> <p>Here is a quick summary of what you have achieved in 1C:</p> <ul> <li>Learned about top-down robot design methodology and master sketches</li> <li>Learned how to use the derive feature to drive part studios using master sketches</li> <li>Learned how to use the origin cube to mate together top level assemblies</li> <li>Learned how to model a simple swerve drivetrain</li> </ul> <p>Remember, practice is essential \u2013 the more CAD models you create, the more proficient and efficient you'll become. Using keyboard shortcuts can significantly accelerate your CAD workflow. Be attentive to best practices to avoid developing any bad habits.</p> <p>In Stage 2, you will begin to model robot mechanisms using all the skills you have learned in Stage 0 and Stage 1! Note that in stage 2, the design guide will become less step-by-step and more open ended, which will enable you to add your own input on designs based on your team's way of doing things. As always though, reference CAD models will be available.</p> <p></p>"},{"location":"design-guide/stage2/2A-drivebaseFullDetail.html","title":"A: Full Detail Drivebase","text":""},{"location":"design-guide/stage2/2A-drivebaseFullDetail.html#2a-full-detail-drivebase","title":"2A: Full Detail Drivebase","text":"<p>Welcome to Stage 2! This section is focused the design of common mechanisms in FRC, both through CAD skills and best practices and through key engineering concepts. Each project's guide will delve into the reasoning behind specific design decisions and the criteria they fulfill, providing less step-by-step instruction and encouraging more independent CAD work.</p>"},{"location":"design-guide/stage2/2A-drivebaseFullDetail.html#introduction","title":"Introduction","text":"<p>The first project in Stage 2 will be detailing the drivetrain you began modeling in Stage 1B. So far, you\u2019ve only modeled the frame and bare bellypan. To finish the drivetrain, you should add the following details.</p> <ol> <li> <p>Battery Mounting: Every robot needs a battery, and while the location may vary based on the other mechanisms present in your robot, it should always be placed as low as possible to make the robot more stable.</p> </li> <li> <p>Electronics Mounting: Adequate space must be allocated on the robot for ease of wiring. Typically, the robot\u2019s electronics are mounted on the bellypan.</p> </li> <li> <p>Bellypan Pocketing: This step is optional. Some teams will prefer to add cutouts in their bellypan to remove weight and make wiring easier. However, pocketing the bellypan significantly increases machining time.</p> </li> <li> <p>Bumpers: While bumper rules can vary from year to year, they are almost always required to protect your robot and other robots from collisions. Making your bumpers easy to attach and remove is also a very nice quality of life improvement for when you\u2019re at competition.</p> </li> </ol> <p>While the exact implementation for each of these details will vary based on the rest of your robot and from team to team, an example reference for Stage 2A is provided here.</p> <p> Example of a fully detailed Stage 2A drivetrain.</p>"},{"location":"design-guide/stage2/2A-drivebaseFullDetail.html#battery-mounting","title":"Battery Mounting","text":"<p>Ensuring that your robot\u2019s battery does not fall out of your robot is critical for successful robot operation. While it may seem obvious, even veteran teams sometimes get this wrong.  Successful battery mounting can be broken down into two components: good battery placement and a robust battery holder.</p>"},{"location":"design-guide/stage2/2A-drivebaseFullDetail.html#battery-placement","title":"Battery Placement","text":"<p>Batteries are heavy: the FRC robot battery weighs a whopping 13 lbs. Since the battery is so heavy, you need to place it as low as possible to keep your robot\u2019s center of gravity low to prevent falling over. Most teams will typically use the bellypan to support their battery as this is the lowest location on the robot. </p>"},{"location":"design-guide/stage2/2A-drivebaseFullDetail.html#battery-holder","title":"Battery Holder","text":"<p>A strong strap should also be used to secure the battery to the mounting and prevent the battery from flying out of the robot on hard collisions. A good option is to use a 1\u201d or 2\u201d wide buckle strap, which can be purchased and cut to size from most stores. FRC vendors like WCP also sell battery mounting accessories including battery holders and straps.</p> <p> Securely strapped battery in a robot. (Photo Credit: FRC 1538) </p> <p>Below we've provided one option for mounting the battery. In this design, the battery is placed horizontally on the bellypan. It is secured with a 2\" wide strap that wraps around the battery and bellypan to secure it. </p> <p>Sample Battery Holder Modeling Slides</p> 0. Finished battery holder w/ mounting holes, strap cutout in bellypan, and strap. 1. Layout of battery and battery mount plate. To fit the battery with 1/16\u201d radius fillets on the inner corners, the cutout should be around 6.705\u201d x 7.225\u201d. 2. 1/8\" thick aluminum is a good option for this plate. Also add a 3/8\" diameter spacers to connect to the bellypan. 3. Add the mounting holes and cut out for the battery strap on the bellypan.  4. Optionally model the battery strap. 5. Optionally pocket the battery holder. 0.2\" wide ribs are recommended.  6. Insert the battery holder, spacer, and battery into the assembly. Don't forget to organize your feature tree, name your parts, assign part materials, and organize your assembly file tree. \u276e \u276f"},{"location":"design-guide/stage2/2A-drivebaseFullDetail.html#electronics-mounting","title":"Electronics Mounting","text":"<p>To make wiring the robot and later inspecting the wiring easier, enough space should be left around each electrical component. You should work with your electrical teammates to determine the best location for the various control system parts. Teams typically try to mount their electronics on the bellypan, permitted there is space. </p> <p> Layout of various different electronic components on a bellypan.</p> <p>A list of typical electrical components found on FRC robots is provided below, as well as a recommended mounting location. Again, mounting locations are highly dependent on the rest of your robot, make sure to always coordinate with your electrical team to decide what is best.</p> Component Function Suggested Location Power Distribution Hub (PDH) or  Power Distribution Panel (PDP) Required to distribute power Bellypan Main Breaker Required to power on/off the robot Somewhere easily accessible and close to the PDH and Battery RoboRIO Required to control the robot Bellypan Integrated motor controller (eg: Falcon 500, Kraken X60) Powers and controls the  integrated motor No electrical mounting required Discrete motor controller  (eg: Spark Max, Talon SRX) Required to power and control some motors  (eg: Neo, CIM) Near the controlled motor  or on the bellypan Robot Radio Required for robot communications Follow Vivid Hosting's radio mounting guidelines. Robot Signal Light Required to indicate robot status Somewhere easily visible Inertial Measurement Unit (IMU) Sensor Used to determine robot heading Ontop of the RoboRIO Voltage Regulator Modules Can be used for custom circuits Bellypan Radio Power Module (RPM) Powers the OpenMesh Radio Not required for VH Radio Pneumatics Hub Controls pneumatic components Bellypan <p>Warning</p> <p>It is a very common misconception that the robot\u2019s IMU sensor (eg: CTRE Pigeon, NavX) must be mounted at the center of the robot. The IMU can be mounted anywhere on the robot, as long as it is securely mounted. An easy place to mount the IMU is right on top of the RoboRIO.</p> <p>One option for mounting the Power Distribution Hub (PDH), main breaker, and RoboRIO onto the bellypan is provided in the below example. The <code>Electronic Mounting</code> Featurescript can be very useful for generating the mounting holes for electronics. If you cannot accurately manufacture mounting holes for electronics, VHB tape (which comes in the Kit of Parts) can be a good option for robustly securing your electronics.</p> <p>Sample Electronics Mounting Slides</p> 0. Finished mounted electronics. 1. Draw box outline for PDH and RoboRIO. Also add the outline and holes for the main breaker. 2. Use the <code>Electronic Mounting</code> Featurescript to add the PDH and RoboRIO mounting holes. Optionally override the hole size for the PDH to be 5/32\u201d diameter, which will allow the mounting bolt to screw directly into the bellypan. 3. Insert the electronics from the MKCad parts library and fasten them. The Pigeon IMU can be fastened to the RoboRIO. \u276e \u276f <p>It is recommended to use the Simplified electronics models to improve assembly performance. You can read more about simplified models on the Assembly Best Practices Page. Simplified swerve module models can also be used to reduce lag. </p> <p>Every robot is also required to have a Robot Signal Light (RSL). An easy location to mount the RSL is on the side of the drive frame. Typically, only one RSL is required and needs to be \u201ceasily visible while standing 3 ft. (~ 100 cm) away from at least one side of the ROBOT\u201d. Be sure to check the latest game manual rules for the most up to date RSL mounting rules.</p> <p> RSL mount constructed out of 1/8\" thick polycarbonate plate. The mounting hole for the RSL is 1\u201d in diameter. The RSL model can be found in the MKCad App.</p> <p>Each robot is also required to have a radio. The radio should be mounted on the robot following Vivid Hosting's radio mounting guidelines.</p>"},{"location":"design-guide/stage2/2A-drivebaseFullDetail.html#bellypan-pocketing","title":"Bellypan Pocketing","text":"<p>Some teams may choose to pocket their bellypan to reduce weight and make wiring easier. A pocketed bellypan can save around 3-4 lbs. However, this will add significant machining time if you are manufacturing the bellypan yourself or increase cost if you are purchasing the bellypan from a fabrication service (eg: Fabworks). You should carefully consider the tradeoffs with your team.</p> <p>If you choose to pocket your bellypan, you can utilize the <code>Vent</code>, <code>Lighten</code>, or <code>Part Lighten</code> Featurescripts to pocket the bellypan. While the workflow may slightly vary between each Featurescript, the general idea is the same. A diamond pattern is recommended for strength and ease of modeling.</p> <p>Sample Bellypan Pocketing Slides</p> 0. Pocketed bellypan.  1. Draw two perpendicular lines that are offset 45 degrees from vertical.  2. Linear pattern the lines until they completely cover the bellypan. These will be the ribs for the bellypan. 3. Offset the outline of the bellypan 0.5\u201d. 4.  Connect any islands that might result from mounting holes being too far from a rib. One way to fix this is to add a slot connecting the island to a rib. 5. Use a pocketing Featurescript to pocket the bellypan. Recommended settings are 0.15\u201d wide ribs and 3/16\u201d tool radius. \u276e \u276f"},{"location":"design-guide/stage2/2A-drivebaseFullDetail.html#bumpers","title":"Bumpers","text":"<p>Bumper construction is described in each year\u2019s FRC game manual. Typically, it is required to be two 2.5\u201d diameter pool noodles backed by a 5\u201d tall 3/4\" thick plywood sheet. Refer to the latest game manual for the most up to date bumper rules. Bumper cutout and ground clearance rules will vary from year to year.</p>"},{"location":"design-guide/stage2/2A-drivebaseFullDetail.html#bumper-model","title":"Bumper Model","text":"<p>To begin, you'll need to model the bumpers. It is recommended to place the bumpers in a new part studio and assembly to keep your feature and assembly trees organized. The minimum level of detail should be a block model of the bumper. Some teams may opt to model the bumper wood, bumper wood holes, angle brackets for the bumper wood, and other details to assist with manufacturing. You should communicate with the rest of your team members to determine the level of detail that is required. </p> <p>Sample Bumper Modeling Slides</p> 0. Finished bumpers assembly inserted into drivetrain assembly.  1. Create a new sketch in the Master Sketch part studio with the bumper profile. A 3/4\" ground clearance and 1/4\" gap between the bumper and frame is recommended. 2. Create a new part studio in the drivetrain folder for the bumpers. Insert the Origin Cube and derive the drivetrain and bumper sketches from the Master Sketch. 3. Sweep the bumper profile along the edges of the drivetrain top layout sketch to create the block model of the bumpers. 4. Optionally add a fillet on the corners. Size it according to how your team wraps the bumper pool noodles. 5. Optionally model the wood for the bumpers. This can be useful for manufacturing purposes. 6. Create a bumper assembly in the drivetrain folder and insert all the components. Don\u2019t forget to group all the components and mate the origin cube mate connector to the origin. 7. Insert the bumper assembly into the drivetrain assembly. \u276e \u276f <p>Keeping the bumper part studio and assembly separate from the drivetrain keeps the drivetrain feature tree cleaner and allows for easier hiding/showing of the bumpers in the top level assembly since you can show and hide the entire bumper assembly at once.</p>"},{"location":"design-guide/stage2/2A-drivebaseFullDetail.html#bumper-mounting","title":"Bumper Mounting","text":"<p>Next, you'll need to model your desired bumper mounts in the drivetrain part studio. </p> <p>Similar to battery mounting, good bumper mounting is often overlooked. While a robust bumper mounting system won\u2019t win you any matches, a poor bumper mounting system can certainly lose you a match. Poor bumper mounting can lead to bumper damage, long bumper swap time, or even lead to your bumpers falling off.</p> <p>In the provided example, the threaded stud bumper mounting system is implemented. You can learn more about bumpers and different bumper mounting options in the Design Fundamentals pages. </p> <p> Section view of the threaded stud bumper mount system. The threaded stud is attached to the bumper wood and the nut holds the stud tight.</p> <p>Sample Bumper Mount Modeling Slides</p> 0. Finished bumper mounts.  1. Model the bumper mount. This part should be 3/16\u201d thick aluminum. The threaded stud falls into the slot. 2. Add the pocket for the nut that screws onto the threaded stud. This nut keeps the bumpers tight with the frame. The pocket secures the nut and prevents the bumper from lifting up. 3. Optionally pocket the mount. 0.15\" wide ribs and 1/8\" tool radius are recommended.  4. Insert the mount and add it to the <code>Group</code>. Copy three more mounts and mate them onto the drivetrain assembly. If your team runs multi piece bumpers (eg: two C shaped bumpers) you may need to add more mounts to secure the bumpers. 5. Finished bumper mounts in drivetrain assembly. \u276e \u276f"},{"location":"design-guide/stage2/2A-drivebaseFullDetail.html#summary","title":"Summary","text":"<p>Congratulations on completing Stage 2A! With the Stage 2A tasks completed, your drivetrain model is well on its way to being fully functional. </p> <p>Here is a quick summary of what you have achieved in 2A:</p> <ul> <li>Learned about battery mounting and the importance of a secure battery holder</li> <li>Learned about core FRC electronics and how and where to mount them</li> <li>Learned how to use the <code>Electronic Mounting</code> Featurescript</li> <li>Optionally learned how to pocket a bellypan</li> <li>Learned about bumpers, how to model them, and the importance of having a secure mounting system</li> <li>Practiced more complex sketching and layout</li> </ul> <p>As you progress, the projects will become more and more open ended and less step-by-step tutorial style as they have been up until now. Be sure to use the Discord to solicit feedback on your designs to learn and improve!</p> <p></p>"},{"location":"design-guide/stage2/2B-basicShooter.html","title":"2B: Basic Shooter","text":"<p>Work In Progress</p> <p></p>"},{"location":"design-guide/stage2/2C-deadaxlePivot.html","title":"2C: Deadaxle Pivot","text":"<p>Work In Progress a</p> <p></p>"},{"location":"design-guide/stage2/2D-slapdownIntake.html","title":"2D: 2022 Over-the-Bumper Slapdown Intake","text":""},{"location":"design-guide/stage2/2D-slapdownIntake.html#over-the-bumper-intakes","title":"Over-the-Bumper Intakes","text":"<p>A common style of intake for gamepieces in FRC (depending on extension rules) is an \"over-the-bumper\" intake (OTB for short). These bring the gamepiece from the floor against and then over the bumper into another subsystem. They were used commonly in 2019, 2020, 2022, 2023, and 2024, and other past games. </p> <p>The two types of OTB intakes are \"slapdown\" which consists of a single set of arms with rollers which slap down and back up again, and four-bar linkages, which allow the intake to stow more horizontally instead of vertically. The intake designed in this stage will be a slapdown intake for 2022 (inspired by 4414 HighTide\u2019s slapdown intake from 2023). </p> <p></p> <p>This video is a great example of a slapdown intake in 2022, on Madtown 1323's robot.</p> <p>Other mechanism examples and deep dives for OTB intakes can be found on the slapdown intakes page and 4-bar intakes page. The mechanism fundamentals page is yet to be made but will also be a helpful resource.</p>"},{"location":"design-guide/stage2/2D-slapdownIntake.html#project","title":"Project","text":"<p>Reference this document to copy the 2022 OTB intake in your own document. </p> <p></p>"},{"location":"design-guide/stage2/2D-slapdownIntake.html#concepts","title":"Concepts","text":"<p>Intake Golden Rules</p> <p>There are many good resources out there for how to design good intakes. Torrance from Team 254 has provided a list of golden rules for roller intakes. This will also be slightly paraphrased/added to in the intake fundamentals page.</p> <p>General Design and Robustness</p> <p>The main structure uses 1/4\" polycarbonate, 2x1 tubes, and nut strips to attach the plates directly to the frame. In this way, the structure would do an especially good job resisting impacts from the front. Because of the rigid nature in how the main plate is mounted, it can be polycarbonate, making it lighter and stronger than pocketed aluminum. The two secondary plates used to make sure all axles are supported on two points aren't connected with a very rigid structure and so work better as aluminum.</p> <p>The intake is as wide as possible to decrease the precision and time needed by the driveteam or autonomous code to intake the game piece. The only aim is to get the game piece into the robot, then it can be centered or serialized inside frame perimeter, also minimizing the time that the intake is down.</p> <p>Pivot</p> <p>The pivot is powered by a single Kraken motor on a 2-stage MAXplanetary gearbox. The 4:1 stages in the MAXplanetary (16:1) and the 12:48 sprocket reduction make a total of 42:1 overall reduction for the pivot. You can assess whether you want this much reduction on your own mechanism by using an arm calculator, but around 30:1 to 42:1 should be good for most intakes.</p> <p>The MAXplanetary uses a 1:1 belt/pulley to transfer rotation to a long cross-axle. All custom pulleys have pockets for COTS metal inserts to prevent them from stripping. There are sprockets on either end of this cross axle, with chain going up to sprockets attached to the arm. This setup is to ensure both sides of the intake are moved up and down equally so there's no weird twisting forces on the intake.</p> <p>For reducing backlash in the system, the 1:1 belt/pulley is exact center-center distance, and the chains are tensioned with inline tensioners. Large sprockets on the output of the arms are good as well for more teeth engagement with the chain.</p> <p>For controlling the intake position, no absolute encoder is needed. You can zero the position when it is stowed and against the hardstop or have it rest on the ground when the robot is turned on, and use the relative encoder to take it to a specific position down.</p> <p>Rollers and Roller Position</p> <p>The rollers are powered with a single Kraken motor with small reduction of 1.6:1; often, you want rollers to be spinning very fast, but still have enough torque to bring in game pieces without stalling the motor. Compression also matters a lot with this. You want to balance compression of a game piece so the intake can move it easily enough without needing too much extra torque from the motors. This is often why adding grippy material to the rollers instead of increasing compression is optimal.</p> <p>There are 3 total rollers. Rollers often provide more consistent compression than wheels and are a great option for transporting game pieces. They are typically cheaper, lighter, and easier to put on a dead axle than wheels. Dead axles allow the intake arms to be connected by effectively long standoffs, making the assembly more rigid, while still allowing the rollers to spin on bearings. The dead axle rollers used in this project use polycarbonate tube and 3D-printed endcaps for the bearings and power transfer. The document can be found here.</p> <p>Only 2 of the rollers are on the pivoting arm portion. The final one inside the frame perimeter is on a separate plate. This can keep the pivot for the intake arms lower, lowering the vertical height of the intake when stowed.</p> <p>Zombie Axles</p> <p>For transferring power to the rollers, because of the plates in the way and how small the pulleys are, it's necessary to transfer power through the axles (live axle). However, one of these axles is repurposed as a deadaxle by the sprockets attached to the intake arms. The sprockets are on bearings, and driven by chain, so they rotate independently from the axles used by the belts and pulleys. A setup like this, where power is transferred both through the axle and just on top of it for packaging purposes, is called a 'zombie axle'.</p>"},{"location":"design-guide/stage2/2D-slapdownIntake.html#master-sketch","title":"Master Sketch","text":"<ol> <li>Sketch the side of your drivetrain and bumper profile</li> <li>Sketch the path of the ball over the bumper</li> <li>Sketch roller or wheel positions needed to get the game piece to move that way. The distance between rollers should be adjusted using the WCP Belt Calculator. \"Extra center\" should be set as -0.02 for ease of assembly and efficiency.</li> <li>Use a sketch circular pattern to represent the stowed position of your intake rollers and define where you want the pivot to be</li> </ol>"},{"location":"design-guide/stage2/2D-slapdownIntake.html#part-studio","title":"Part Studio","text":"<ol> <li>Insert the origin cube (use the featurescript)</li> <li>CAD the front of your reference drivetrain or derive the tubes and modules from the another swerve drivebase you designed (e.g. from 2A). Make these a composite part. This is only for referencing.</li> <li>CAD the superstructure tube (mirror and add the mirror to the drivetrain composite for referencing). Use the assembly mirror featurescript to add mate connectors to the tube for easy assembly.</li> <li>Derive and transform the nut strips for referencing</li> <li>Design the plates based off of your master sketch</li> <li>Create the shafts using the shaft featurescript</li> <li>Create the intake arm and spacer to attach a sprocket to it</li> <li>Create a mate connector on the pivot point in the master sketch, owned by the origin cube. This is for creating motion in the top level assembly.</li> <li>Use your chosen belt/chain generator featurescripts to create the belts and chain</li> <li>Name and give materials and appearances to all your parts</li> </ol>"},{"location":"design-guide/stage2/2D-slapdownIntake.html#assembly","title":"Assembly","text":"<p>Because this subsystem contains a static part and a moving part, we want to separate them into rigid (no movement) assemblies, then combine them at the top level. This makes load times significantly less.</p> <p>Create an assembly for the static parts, insert the parts from the part studio with the green checkmark, and group them together. Fasten the assembly to the origin by right clicking one of the parts and clicking \"Add mate connector to instance origin\" and fastening that mate connector to the origin of the assembly. Add the rest of the parts from the part studio, MKCAD, and standard content that don't move with the intake arms.</p> <p></p> <p>Create an assembly for the intake arms and do the same thing as above to complete the assembly and make it rigid.</p> <p></p> <p>Now create a top level assembly and insert the static assembly (fasten to the origin) and intake arm assembly. Create a revolute mate between the mate connectors from the origin cubes in both assemblies and add a limit to it. This completes the slapdown intake assembly.</p> <p></p> <p></p>"},{"location":"design-guide/stage2/2E-cascadeElevator.html","title":"2E: Cascade Elevator","text":"<p>Work In Progress</p> <p></p>"},{"location":"design-guide/stage2/foamBallConveyer.html","title":"2x: Foam Ball Conveyer","text":"<p>Work In Progress</p> <p></p>"},{"location":"design-guide/stage2/fourbarLinkage.html","title":"2x: Four-bar Linkage","text":"<p>Work In Progress</p>"},{"location":"design-guide/stage2/fourbarLinkage.html#design-theory","title":"Design Theory","text":""},{"location":"design-guide/stage2/fourbarLinkage.html#what-are-linkages-why-would-you-use-them","title":"What are linkages / why would you use them","text":"<p>Four bar linkages are an alterative to the slapdown deployment method introduced in 2E {#TODO link}. Carefully designed linkages allow more design flexibility for space constrained designs or designs with difficult required positions for the intake rollers. By adjusting the layout sketch the end positions of the main intake plate can be translated and rotated as desired. A slapdown intake only rotates the intake, so will always end up with the intake being stowed vertically above its pivot point. A four bar intake could package the intake more tightly by translating a large intake closer to the bottom of the robot when stowed.</p>"},{"location":"design-guide/stage2/fourbarLinkage.html#pneumatic-vs-motor-actuation","title":"Pneumatic vs Motor Actuation","text":"<p>Motors are the most approachable actuation method for any mechanism. Four bar intakes are one of the most common places to use pneumatic cylinders however, and can present some situational benifits. Pneumatic cylinders can move complexity from the mechanical design of the mechanism being designed to the electronics area of the robot. Before deciding on using pneumatics in a design, keep in mind that it imposes the weight and volume of the pneumatic system components onto another area of your robot.</p>"},{"location":"design-guide/stage2/fourbarLinkage.html#linkage-mechanical-advantage","title":"Linkage mechanical advantage","text":"<p>TODO: graphics for mechanical advantage (avoiding over center)</p>"},{"location":"design-guide/stage2/fourbarLinkage.html#creating-a-four-bar-linkage","title":"Creating a Four Bar Linkage","text":"<p>This step by step guide walks through creating a four bar linkage to intake a 9\" foam ball. It is actuated by a pneumatic cylinder.</p> Alterate Video Tutorial By Nick Aarestad <p>Four Bar Guide:</p> <p>Step 1.     First you need to understand the desired flow of the game piece through the intake (green arrow). Draw the bumper geometry, starting position of the game piece (touching the front bumper), and ending position of the game piece. Also draw several intermediate positions of the game piece along its path.       Step 2a (left). Next define the extended position and retracted position of your intake rollers (left picture). The rollers should maintain contact and the desired compression of the game piece. In this case the rollers are dimensioned to be 7\" away from the bumpers and the leading roller is 7\" off of the ground. The retracted state of the intake must be within the frame perimeter of the robot, and should take up as little space as possible.  The main intake plate holds the intake rollers, as well as the mounting points where the four bar linkage links will attach to the intake plate. In the picture on the left the linkage attachment points are defined using triangles. These attachment points must be at a consistent location relative to the rollers. Equals constraints are used on each one of those construction lines between the extended and retracted states to make sure they are the same.  Step 2b (right).  The positions of the intake rollers are typically full defined, but other points will need to be moved around as required to design a functional linkage. The linkage attachment points in the intake plate, and the linkage attachment points to the chassis should be moved around by hand until a reasonable geometry is accomplished. Then, as in the right picture, use dimensions to fully define the linkage. The attachment points to the chassis should be dimensioned, and some points will end up fully defined as a result of the geometric constraints.   Fully Defined Layout Sketch:  Step 4. (only if pneumatic) In this example a pneumatic cylinder will be used to actuate the linkage in and out. The longer solid line is the extended length of the cylinder and the shorter construction line is the retracted length of the cylinder. There are many other ways to arrange this linkage, including ones that act on the top arm instead of the bottom arm, or that result in the cylinder being retracted when the intake is extended. Define the point onto the link where the cylinder will attach (5.5\" dimension) at both the extended and retracted states of the linkage. The rear mounting point of the linkage will then be fully defined, and the linkage layout is complete.  Step 5.  Using proper parametric cad practice, you are now ready to sketch and extrude the plates for the intake and linkage. These should be where they will actually be in the assembly not on the center line of the part studio. Advanced sketching techniques can be used to ensure zero collisions or perfect fit between the links. Do not attempt this for your first design. Instead, make simple shapes, then check for interferences in the assembly and adjust the plates as needed until there are no collisions at both ends of travel. These plates will take serious intakes with other robots and the field, 1/4\" polycarbonate with significant margins around each hole (&gt;0.5\") is recommended.  Step 6.  Four bar linkages can be quite complicated to assemble, and will not be as clean as a simpler assembly with fewer moving subassemblies. That said, be sure to use proper origin cube assembly practices when assembling your intake. This picture shows the fully assembled intake plates, as well as the pneumatic cylinder. It includes some other hardware for clarity such as the intake rollers but should not be taken as an example of a good design. Insert the four bar layout sketches into the assembly and make sure that the intake moves exactly as you expect it to. The image shows the retracted state of the intake where the pneumatic cylinder is fully retracted, and the plates match the layout sketch perfectly. If this is not the case you must track down the problem and fix it.  [onshape link](https://cad.onshape.com/documents/9aeba443b3990c61c52d9613/w/fe0631a64edb24356a3dbe20/e/673191a338fd6c4480e9d624?renderMode=0&amp;uiState=663e8f226d078f47b184758e)       *[WCP]: West Coast Products  *[REV]: REV Robotics  *[TTB]: The Thrifty Bot  *[OTB]: \"Over the Bumper\" typically used to refer to a style of intake where you lift the piece over the bumper  *[UTB]: \"Under the Bumper\" typically used to refer to a style of intake where you move the piece under the bumper  *[COTS]: Commercial Off the Shelf parts are anything you can buy from a vendor.  *[V4B]: \"Virtual 4 Bar\" is where a second degree of freedom is directly geared of a previous degree of freedom instead of being moved independently or by a linkage.  *[MCM]: Mcmaster Carr  *[C-C]: \"Center to Center\" distance  *[turnbuckle]: A threaded part that goes in between chain links to tension the chain  *[COG]: Center of Gravity, also referred to as COM(Center of Mass)  *[4Bar]: A type of linkage characterized by its 4 pivot points  *[Deadaxle]: A type of axle setup where the axle is fixed in place and or is not transferring the torque of the system through it.  *[Deadaxles]: A type of axle setup where the axle is fixed in place and or is not transferring the torque of the system through it.  *[deadaxle]: A type of axle setup where the axle is fixed in place and or is not transferring the torque of the system through it.  *[Liveaxle]: A type of axle setup where the main torque transfer is through the axle.  *[liveaxle]: A type of axle setup where the main torque transfer is through the axle.  *[Zombie-Axle]: Typically used on pivots a zombie axle spins with the mechanism, but is transferring little to no torque through it. This is commonly used to put an encoder on the pivot point.  *[Tube-Nut]: Also known as a \"Star Nut\", these provide an easy way to put a thread in end of a hollow tube allowing you to bolt the tube to another part.   *[tube-Nut]: Also known as a \"Star Nut\", these provide an easy way to put a thread in end of a hollow tube allowing you to bolt the tube to another part.   *[Cantilever]: Horizontal Element that's supported by one side only.  *[cantilever]: Horizontal Element that's supported by one side only.  *[Shear]: When forces are applied parallel to the plane of a material, causing breaking of fasteners due to excessive force and stress.  *[shear]: When forces are applied parallel to the plane of a material, causing breaking of fasteners due to excessive force and stress.  *[Torque]: Force that produces rotational movement.  *[torque]: Force that produces rotational movement.  *[PDH]: Power Distribution Hub.  *[SparkMAX]: Motor controller for REV motors.  *[PWM]: Pulse Width Modulation cable.  *[RIO]: RoboRIO, brain of the robot.  *[Blinkn]: LED controller for REV.  *[Radio]: Device that helps the robot communicate with the driver station.  *[radio]: Device that helps the robot communicate with the driver station.  *[3DP]: Abbreviation for 3D printed or 3D printing.  *[Gusset]: Reinforcement plate, usually made of aluminum, used to strengthen connections between two tubes.  *[gusset]: Reinforcement plate, usually made of aluminum, used to strengthen connections between two tubes.  *[poly]: Abbreviation for polycarbonate.  *[Poly]: Abbreviation for polycarbonate.  *[pc]: Abbreviation for polycarbonate.  *[PC]: Abbreviation for polycarbonate.  *[Stripping]: Process of removing threads or bolt heads, often due to excessive force or wear.  *[stripping]: Process of removing threads or bolt heads, often due to excessive force or wear.  *[Tapping]: The process of creating threads in a hole using a tap tool.  *[tapping]: The process of creating threads in a hole using a tap tool.  *[Billet]: Component machined down from a solid block of material.  *[billet]: Component machined down from a solid block of material.  *[Brainpan]: Flipped electronics bellypan.  *[brainpan]: Flipped electronics bellypan.  *[bellypan]:  Plate for mounting electronics on the underside of your drivebase.  *[Bellypan]:  Plate for mounting electronics on the underside of your drivebase.  *[hardstop]: A physical limit designed to prevent a mechanism or component from moving beyond a certain point.  *[softstop]:  A software-based limit or control mechanism that restricts the movement of a mechanism or component to prevent it from exceeding certain parameters.  *[Hardstop]: A physical limit designed to prevent a mechanism or component from moving beyond a certain point.  *[Softstop]:  A software-based limit or control mechanism that restricts the movement of a mechanism or component to prevent it from exceeding certain parameters.  *[DP]: Diametral pitch is the number of teeth per inch of the pitch circle.  *[packaging]:  The way in which you fit parts of your robot together in a space  *[Packaging]:  The way in which you fit parts of your robot together in a space  *[backlash]:  'Slop' in a power transmission system; can wiggle back and forth without engaging the whole system  *[Backlash]:  'Slop' in a power transmission system; can wiggle back and forth without engaging the whole system  *[parametric]:  Designed in a way that uses relationships between steps to maintain design intent  *[Parametric]:  Designed in a way that uses relationships between steps to maintain design intent"},{"location":"design-guide/stage2/pastaRollerIntake.html","title":"2x: 2023 Pasta Roller Intake","text":"<p>Work In Progress</p> <p></p>"},{"location":"design-guide/stage3/3A-multidoc%26MS.html","title":"3A: Multidoc Organization and Mastersketching","text":"<p>Welcome to stage 3! In this stage we focus on practicing top down design and master sketching. Best practices for robot document organization, part studios, and assemblies, are included in the best practices category. Please go through this before continuing with the section.</p> <p>Coming Soon</p> <p></p>"},{"location":"design-guide/stage3/3B-973-2020.html","title":"3B: Replicating 973's 2020 Robot","text":"<p>In this stage, we focus on integration and putting everything together into one cohesive project. We'll be designing two robots, a 973 2020 style shooter robot, and a 973 2023 pick and place robot. These hit many of the fundamentals necessary in order design a robot, and by the end you should be prepared for designing robots in the season with some practice in the intermediate stages. </p> <p>WIP</p> <p></p>"},{"location":"design-guide/stage3/3C-973-2023.html","title":"3C: Replicating 973's 2023 Robot","text":"<p>WIP</p> <p></p>"},{"location":"mechanism-examples/index.html","title":"Mechanism Examples","text":""},{"location":"mechanism-examples/index.html#mechanism-examples","title":"Mechanism Examples","text":"<p>\"Steal from the best, invent the rest\" has been an FRC ethos ever since the competitions creation. Because of how important looking at past designs is in the learning process, we have created a library of mechanisms that can be used as reference when learning how to design a wide variety of FRC mechanisms.</p> <p>Note</p> <p>A CAD link has been provided when available, but examples without CAD can still be useful to look at with Behind The Bumpers videos and ChiefDelphi threads.</p> <p>Contribution</p> <p>This library of mechanism examples could always be expanded. By following the instructions on the methods of contributing page, you can add your own examples or help write \"Behind the Design\"s for existing examples.</p> <ul> <li> <p></p> <p>Swerve drivebases with examples of electronics layout</p> <p> Swerve Drivebases</p> </li> <li> <p></p> <p>Mechanisms designed to shoot gamepieces</p> <p> Shooters</p> </li> <li> <p></p> <p>Over-the-bumper intakes deployed with a four-bar linkage</p> <p> Four-bar Intakes</p> </li> <li> <p></p> <p>Over-the-bumper intakes deployed with a single pivot</p> <p> Slapdown Intakes</p> </li> <li> <p></p> <p>Elevators rigged continuously with belt or string</p> <p> Continuous Elevators</p> </li> <li> <p></p> <p>Elevators rigged in a cascading fashion, with each stage linked to the last</p> <p> Cascade Elevators</p> </li> <li> <p></p> <p>Different pivot designs, usually for arms</p> <p> Pivots</p> </li> </ul> <p></p>"},{"location":"mechanism-examples/drivebase/index.html","title":"Drivebase Examples","text":""},{"location":"mechanism-examples/drivebase/index.html#swerve-drivebases","title":"Swerve Drivebases","text":"<p>The drivebase is the single most important part of your robot, providing a bed for every other subsystem to build off. Examples of different drivebases can provide inspiration for electronics layout, bellypan shapes, and structural cross members for mounting, all of which can be a hard but crucial part of designing a robot, as accessibility and maintainability need to be preserved even as subsystems get placed on top of the robot.</p> <ul> <li> <p></p> <p>A custom plate to keep the radio and breaker accessible, holes with grommets to allow wires to pass through the cross members</p> <p> 2910 Charged Up Drivebase</p> </li> <li> <p></p> <p>A central 2x2 cross member, a brainpan, and citrus bumper mounting plates.</p> <p> 972 Brainpan Drivebase</p> </li> </ul> <p></p>"},{"location":"mechanism-examples/drivebase/2910.html","title":"2910 Drivebase","text":""},{"location":"mechanism-examples/drivebase/2910.html#2910-charged-up-drivebase","title":"2910 Charged Up Drivebase","text":"Swerve drivetrain featuring MK4I swerve modules, a pocketed bellypan, and a billet brass frame-rail for weight distribution."},{"location":"mechanism-examples/drivebase/2910.html#links","title":"Links","text":"<p>CAD Link</p>"},{"location":"mechanism-examples/drivebase/2910.html#behind-the-design","title":"Behind the Design","text":"<p>This drivebase embodies all fundamentals of good drivebase design, including the following features:</p>"},{"location":"mechanism-examples/drivebase/2910.html#rigidity","title":"<p>Rigidity </p>","text":"This drivebase is constructed primarily from 1/8 inch box tube, with important cross-members providing rigidity to the structure. Drivebases must be built extremely tough, as they will experience the brunt of each collision while robots travel across the field at high speed. The bellypan offers extra rigidity by holding the frame members parallel with each other."},{"location":"mechanism-examples/drivebase/2910.html#electrical","title":"<p>Electrical </p>","text":"Holes in the drive-rails allow electrical teams to easily route wires to where they need to go. Holes cut into aluminum may have sharp edges, so it's important to cover them with rubber grommets! The robot's bellypan should have mounting holes for most of the major electronics designed into it. This allows for easy and secure fastening of components like the PDH, and reduces the chances of electronics coming lose in competition. <p>The drivebase usually serves a double purpose as a robot's electrical hub, so it's important to take electronics into consideration. While looking through the CAD, you may notice several key aspects of this drivebase that intentionally accommodate electronics including...</p> <ul> <li>Pocketed bellypan serves a double purpose of both weight reduction, and providing many points to secure wires with zip-ties.</li> <li>All electronics have pre-designed mounting holes</li> <li>Holes in the frame-rails around the PDH allow for easy wire routing while keeping wires low in the bellypan and out of the way.</li> </ul> <p></p>"},{"location":"mechanism-examples/drivebase/brainpan.html","title":"972 Brainpan Drivebase","text":""},{"location":"mechanism-examples/drivebase/brainpan.html#972-brainpan-drivebase","title":"972 Brainpan Drivebase","text":"Swerve drivetrain featuring the \"brainpan\" style of electroncis mounting."},{"location":"mechanism-examples/drivebase/brainpan.html#links","title":"Links","text":"<p>CAD Link</p>"},{"location":"mechanism-examples/drivebase/brainpan.html#behind-the-design","title":"Behind the Design","text":"<p>Coming Soon</p> <p></p>"},{"location":"mechanism-examples/elevator/cascade/index.html","title":"Cascade Elevator Examples","text":""},{"location":"mechanism-examples/elevator/cascade/index.html#cascade-elevators","title":"Cascade Elevators","text":"<p>Cascade elevators help move other mechanisms vertically. The first stage is driven directly and the subsequent stages are linked with loops of line, causing all the stages to extend up an equal amount. This is the \"cascading\" motion. They are generally faster than continuous elevators but the typical design doesn't allow anything to pass through the stages.</p> <ul> <li> <p></p> <p>Clean 2-stage cascade elevator with a plate carriage</p> <p> 2-Stage Cascade Elevator</p> </li> <li> <p></p> <p>Clean 3-stage cascade elevator with a plate carriage</p> <p> 3-Stage Cascade Elevator</p> </li> </ul> <p></p>"},{"location":"mechanism-examples/elevator/cascade/2stage.html","title":"2 Stage Cascade Elevator","text":""},{"location":"mechanism-examples/elevator/cascade/2stage.html#2-stage-cascade-elevator","title":"2 Stage Cascade Elevator","text":"Chain driven 2 stage elevator featuring a plate based carriage. Uses TTB COTS Rigging and WCP Elevator Blocks."},{"location":"mechanism-examples/elevator/cascade/2stage.html#links","title":"Links","text":"<p>CAD Link</p>"},{"location":"mechanism-examples/elevator/cascade/2stage.html#behind-the-design","title":"Behind the design","text":"<p>Coming Soon</p> <p></p>"},{"location":"mechanism-examples/elevator/cascade/3stage.html","title":"3 Stage Cascade Elevator","text":""},{"location":"mechanism-examples/elevator/cascade/3stage.html#3-stage-cascade-elevator","title":"3 Stage Cascade Elevator","text":"Chain driven 3 stage elevator featuring a plate based carriage. Uses TTB COTS Rigging and WCP Elevator Blocks."},{"location":"mechanism-examples/elevator/cascade/3stage.html#links","title":"Links","text":"<p>CAD Link</p>"},{"location":"mechanism-examples/elevator/cascade/3stage.html#behind-the-design","title":"Behind the design","text":"<p>Coming Soon</p> <p></p>"},{"location":"mechanism-examples/elevator/continuous/index.html","title":"Continuous Elevator Examples","text":""},{"location":"mechanism-examples/elevator/continuous/index.html#continuous-elevators","title":"Continuous Elevators","text":"<p>Continuous elevators are great when you need a lot of extension distance, high stage overlap, or elevator passthrough.</p> <ul> <li> <p></p> <p>Similar to 1678's 2023 Elevator, 3-stage, driven by a spool and line, with unique power transmission </p> <p> External Cable Driven Elevator</p> </li> <li> <p></p> <p>A 3-stage belt-driven continuous elevator with a tube carriage, belts tensioned by cams, and WCP bearing blocks</p> <p> Internal Belt Driven Elevator</p> </li> </ul> <p></p>"},{"location":"mechanism-examples/elevator/continuous/belt.html","title":"Internal Belt Driven Elevator","text":""},{"location":"mechanism-examples/elevator/continuous/belt.html#internal-belt-elevator","title":"Internal Belt Elevator","text":"Internally rigged with two massive HTD5 timing belts, makes for an extremely small footprint"},{"location":"mechanism-examples/elevator/continuous/belt.html#link","title":"Link","text":"<p>CAD Link</p>"},{"location":"mechanism-examples/elevator/continuous/belt.html#behind-the-design","title":"Behind the design","text":"<p>Coming Soon</p> <p></p>"},{"location":"mechanism-examples/elevator/continuous/cable.html","title":"External Cable Driven Elevator","text":""},{"location":"mechanism-examples/elevator/continuous/cable.html#external-cable-driven-elevator","title":"External Cable Driven Elevator","text":"Externally rigged cable driven elevator, utilizing the throughbore capabilities of the NEO vortex to simplify the power delivery."},{"location":"mechanism-examples/elevator/continuous/cable.html#link","title":"Link","text":"<p>CAD Link</p>"},{"location":"mechanism-examples/elevator/continuous/cable.html#behind-the-design","title":"Behind the design","text":"<p>Coming Soon</p> <p></p>"},{"location":"mechanism-examples/intake/4bar/index.html","title":"Four-Bar Intake Examples","text":""},{"location":"mechanism-examples/intake/4bar/index.html#four-bar-intakes","title":"Four-Bar Intakes","text":"<p>The four-bar style of over-the-bumper intakes is very common in situations where your packaging is constrained vertically but not horizontally.</p> <ul> <li> <p></p> <p>Extremely simple four-bar intake with compliance wheels, motor driven with chain</p> <p> 1678's Rapid React Intake</p> </li> <li> <p></p> <p>Simple four-bar intake with deadaxle rollers for a more rigid design</p> <p> Andrew's Clean Four-Bar Intake</p> </li> <li> <p></p> <p>Another example of a four-bar intake with deadaxle rollers but with a different power transmission setup</p> <p> Vaughn's Four-bar Intake</p> </li> </ul> <p></p>"},{"location":"mechanism-examples/intake/4bar/1678.html","title":"1678's 2022 Intake","text":""},{"location":"mechanism-examples/intake/4bar/1678.html#1678s-2022-intake","title":"1678's 2022 Intake","text":"Motor driven 4 bar intake designed to take up minimal horizontal space"},{"location":"mechanism-examples/intake/4bar/1678.html#link","title":"Link","text":"<p>CAD Link</p>"},{"location":"mechanism-examples/intake/4bar/1678.html#behind-the-design","title":"Behind the design","text":"<p>4 bar OTB intakes are built to pull gamepieces off the floor and into the robot, but to do so they put themselves in a precarious situation. Sitting outside the robots frame perimeter, they are susceptible to damage from collisions with the field and other robots. All OTB intake designs are heavily influenced by the design requirements to be robust against impacts and damage, fast, and light.</p>  Always include a way to tension your chains!  OTB intakes must actuate quickly and accurately, so a motor is a good choice to power them. 1678 used a single Falcon 500 with a 30:1 ratio. This intake featured a torque transfer shaft (highlighted yellow in the image) to transfer power to both sides of the intake. Driving both sides of the intake pivot prevents the entire intake from bending under the loads of extension and retraction. The pivot itself is driven by chain on a 32t plate sprocket. Using a chain for the final reduction and power transmission is optimal due to its ability to absorb shock loads.  These screws and washers prevent bearings from popping out during impacts.   The intake rollers are powered by a Falcon 500, and power is transferred using HTD 5mm timing belts. The intake is designed with the \"touch it own it\" design philosophy, and it spans the full width of the robot to make intaking as easy as possible for the driver. The intake is \"geared\" (using belt and pulley reductions) so that the surface speed of the rollers are approximately 2.5x the speed of the robot. This allows the robot to intake balls even while driving into them at full speed. Each level of wheels is also belted together such that they have equal surface speeds, despite their different diameters.  It is important to take the diameter of your intake wheels/rollers into account because it may effect their surface speeds. <p>This intake takes many special considerations to increase its survivability and robustness</p> The first stage of rollers has two belts powering it for redundancy, just in case one belt is damaged. Pulleys feature extra-large flanges to prevent belts from slipping off. Intake plates are manufactured from 1/4\" polycarbonate, which is the most common intake material due to its strength to weight ratio and ability to return to its original shape after deforming. This intake has extra aluminum reinforcement on the areas most susceptible to breaking. Intake hardstopped in its down position. Intake hardstopped in its up position <p> 1678 designed their intake polycarbonate plates to hardstop on each other in both the fully extended and retracted positions. This makes programming the intake easier, and helps the robot pass inspection by proving that the intake cannot extend past the frame perimeter extension limit. In a pneumatically actuated intake, having the pivot plates hardstop allows for some error margin on the pneumatic piston's stroke.</p>"},{"location":"mechanism-examples/intake/4bar/1678.html#see-this-intake-in-action-here","title":"<p> See this Intake in Action Here </p>","text":"1678 Behind the Bumpers 1678 Match Video"},{"location":"mechanism-examples/intake/4bar/clean.html","title":"Andrew's Clean 4 Bar Intake","text":""},{"location":"mechanism-examples/intake/4bar/clean.html#andrews-clean-4-bar","title":"Andrew's Clean 4 Bar","text":"Motor driven 4 bar intake designed to be as simple as possible, utilizing deadaxle rollers"},{"location":"mechanism-examples/intake/4bar/clean.html#link","title":"Link","text":"<p>CAD Link</p>"},{"location":"mechanism-examples/intake/4bar/clean.html#behind-the-design","title":"Behind the Design","text":"<p>Coming Soon</p> <p></p>"},{"location":"mechanism-examples/intake/4bar/vaughn4bar.html","title":"Vaughn's 4 Bar Intake","text":""},{"location":"mechanism-examples/intake/4bar/vaughn4bar.html#vaughns-4bar-intake","title":"Vaughn's 4bar Intake","text":"Motor driven 4 bar intake designed to be as simple as possible, utilizing deadaxle rollers"},{"location":"mechanism-examples/intake/4bar/vaughn4bar.html#link","title":"Link","text":"<p>CAD Link</p>"},{"location":"mechanism-examples/intake/4bar/vaughn4bar.html#behind-the-design","title":"Behind the design","text":"<p>Coming Soon</p> <p></p>"},{"location":"mechanism-examples/intake/slapdown/index.html","title":"Slapdown Intake Examples","text":""},{"location":"mechanism-examples/intake/slapdown/index.html#slapdown-intakes","title":"Slapdown Intakes","text":"<p>The slapdown style of \"Over the Bumper\" intakes is very common in situations where your packaging is constrained horizontally, but not vertically.</p> <ul> <li> <p></p> <p>Pivot driven by chain and a torque transfer bar, separate stationary wheel axles, bent polycarb funnel, mounted with nutstrips</p> <p> 4414-Style Intake</p> </li> <li> <p></p> <p>Very different from most modern intakes, it helps center heavy gamepieces through a gap in the bumpers, driven by chain with a deadaxle pivot</p> <p> Washed's Beavertail Intake</p> </li> <li> <p></p> <p>Some rollers are decoupled so the pivot for the intake can be lowered below the ball path</p> <p> Low Pivot Slapdown Intake</p> </li> <li> <p></p> <p>Uses rollers to center a piece against bent polycarb, then flips it back for a passthrough. Examples of how to mount cameras and sensors to allow more automation</p> <p> 6423's 2024 Flip Intake</p> </li> </ul> <p></p>"},{"location":"mechanism-examples/intake/slapdown/4414style.html","title":"4414 Style  Intake","text":""},{"location":"mechanism-examples/intake/slapdown/4414style.html#4414-style-slapdown-intake","title":"4414 Style Slapdown Intake","text":"A coaxial slapdown design popularized by Team 4414 | HighTide"},{"location":"mechanism-examples/intake/slapdown/4414style.html#links","title":"Links","text":"<p>CAD Link</p>"},{"location":"mechanism-examples/intake/slapdown/4414style.html#behind-the-design","title":"Behind the design","text":"<p>Coming Soon</p> <p></p>"},{"location":"mechanism-examples/intake/slapdown/6423otb.html","title":"6423 Crescendo Slapdown Intake","text":""},{"location":"mechanism-examples/intake/slapdown/6423otb.html#6423-crescendo-flip-intake","title":"6423 Crescendo Flip Intake","text":"This common 2024 design was inspired by the ri3d team Cranberry Alarm. It is distinct from the traditional \"passthrough\" intake design, not letting the note travel fully through the intake."},{"location":"mechanism-examples/intake/slapdown/6423otb.html#links","title":"Links","text":"<p>CAD Link</p>"},{"location":"mechanism-examples/intake/slapdown/6423otb.html#behind-the-design","title":"Behind the design","text":"<p>Coming Soon</p> <p></p>"},{"location":"mechanism-examples/intake/slapdown/low.html","title":"Low Pivot Slapdown Intake","text":""},{"location":"mechanism-examples/intake/slapdown/low.html#low-pivot-slapdown-intake","title":"Low Pivot Slapdown Intake","text":"A special coaxial slapdown design popularized by Team 4414 | HighTide, that incorporates fixed rollers to aide in indexing, that overlap with the moving intake arms for compact packaging"},{"location":"mechanism-examples/intake/slapdown/low.html#links","title":"Links","text":"<p>CAD Link</p>"},{"location":"mechanism-examples/intake/slapdown/low.html#behind-the-design","title":"Behind the design","text":"<p>Coming Soon</p> <p></p>"},{"location":"mechanism-examples/intake/slapdown/washed.html","title":"Washed Beavertail Intake","text":""},{"location":"mechanism-examples/intake/slapdown/washed.html#washeds-beavertail-intake","title":"Washed's Beavertail Intake","text":"A slapdown from a different era of FRC commonly known as a \"Beaver Tail\" intake. It incorporates sideways belts to center a gamepiece through a gap in the bumpers"},{"location":"mechanism-examples/intake/slapdown/washed.html#links","title":"Links","text":"<p>CAD Link</p>"},{"location":"mechanism-examples/intake/slapdown/washed.html#behind-the-design","title":"Behind the design","text":""},{"location":"mechanism-examples/intake/slapdown/washed.html#simplicity","title":"Simplicity","text":"<p>This intake features a classic \"Beavertail\" design that was popularized in 2012, and has stuck around as a niche way to intake small-medium sized balls through a bumper cutout without sacrificing on acquisition zone.</p> This intake utilizes the spinning section of a NEO Vortex, and MAX90 Gearbox to achieve really simple packaging"},{"location":"mechanism-examples/intake/slapdown/washed.html#serviceability","title":"Serviceability","text":"<p>Even though this intake is built like a tank, anything extending outside of your robots's frame perimeter needs to be designed for serviceability. The Washed Beavertail Intake achieves this by using an intermediary plate between the 1x1 tubing arms and the pivot sprocket. If you build a second identical intake you can quickly swap them even with the tightest match schedule.</p> By having a middleplate the entire intake can be taken off with 6 easy to access bolts."},{"location":"mechanism-examples/intake/slapdown/washed.html#robustness","title":"Robustness","text":"<p>This intake uses a 7/8\" Aluminum Tube with a bushing to achieve smooth strong movement on the pivot. 7/8\" Bushings are great because the common offerings have a 1.125\" OD making them compatible with most COTS sprockets. The 7/8\" tube extends into the frame tube to take load off the Tube-Nut at the end of the tube.</p> <p></p>"},{"location":"mechanism-examples/pivots/index.html","title":"Pivot Examples","text":""},{"location":"mechanism-examples/pivots/index.html#pivots","title":"Pivots","text":"<p>Rotating arms are a key mechanism in FRC\u00ae robotics. They are often essential in the deployment and manipulation of mechanisms.</p> <ul> <li> <p></p> <p>Double jointed arm, high pivot, A-frame structure, stub axles</p> <p> 6328 A-Frame Pivot</p> </li> <li> <p></p> <p>Chain-driven custom dead axle pivot, electronics and camera mounts, rotating final stage tensioning</p> <p> 2910 Dead Axle Pivot</p> </li> </ul> <p></p>"},{"location":"mechanism-examples/pivots/2910pivot.html","title":"2910 Dead Axle Pivot","text":""},{"location":"mechanism-examples/pivots/2910pivot.html#2910-dead-axle-pivot","title":"2910 Dead Axle Pivot","text":"This dead axle pivot was created by 2910 just recently in the 2023 season and has already been utilized by a number of different teams, including Hall of Fame Team 359 Hawaiian Kids that next year in 2024, who ranked #20 in the world using this pivot as the base for their robot."},{"location":"mechanism-examples/pivots/2910pivot.html#links","title":"Links","text":"<p>CAD Link</p>"},{"location":"mechanism-examples/pivots/2910pivot.html#behind-the-design","title":"Behind the Design","text":"<p>Coming Soon</p> <p></p>"},{"location":"mechanism-examples/pivots/6328pivot.html","title":"6328 A-Frame Pivot","text":""},{"location":"mechanism-examples/pivots/6328pivot.html#6328-a-frame-pivot-2023","title":"6328 A-Frame Pivot 2023","text":"This triple pivoted design folded in on itself to start inside frame perimeter, and allowed for a near universal manipulation of the robot\u2019s end effector."},{"location":"mechanism-examples/pivots/6328pivot.html#links","title":"Links","text":"<p>CAD Link</p>"},{"location":"mechanism-examples/pivots/6328pivot.html#behind-the-design","title":"Behind the Design","text":"<p>In many cases, pivoting arms are a fundamental mechanism in the architecture of a robot. Thus, rigid, robust, and fast pivoting mechanisms can make or break a good design. A failure in the pivot of a design like this would put completely put a robot out of commission.</p>  Robots with lower COG's are less likely to tip and have the advantage in pushing battles!  The main pivot is powered by a custom 2 NEO high-reduction gearbox that is integrated into the A-Frame of the pivot. This is the most important pivot on the robot, since it moves the most mass. For those reasons want as much power as possible here, so two-four motors is ideal. MAXPlanetaries are not rated for the forces expected to be applied in this gearbox, so a custom gearbox is a necessity. The gearbox is placed as low as possible to lower the COG of the robot.  The gearbox drives a Super Max Spline shaft, which is a Max Spline shaft reinforced with an interal aluminum tube. Using this liveaxle takes the load of the pivot off of the gearbox and onto an incredibly heavy duty shaft. All of the Max Spline on this robot is reinforced Super Max Spline, except for the main pivot joint.  Internal aluminum tube reinforces the main drive shaft.  <p>The main pivot joint is supported vertically on each side by 2 angled 1x1 shafts and a 2x1 shaft. Triangles are strong! The A frame is a triangle, and the vertical 2x1 splits each side into two more mirrored triangles. With the plates clamping on both sides this thing is bulletproof. Plates are not lightweighted at the bottom in order to lower COG and because these parts are fixed to the superstructure, so their weight doesn\u2019t limit the rotational speed of the pivot.</p>  A-Frame superstructure side view.   Static triangle load distribution breakdown. Triangles are the only shape which are not collapsable when a force is applied to any side.  <p>The main pivot is driven on both sides by long runs of chain to prevent torsion (twisting of the arm). These long runs of chain allow for inline tensioners to eliminate backlash in the pivot. The maxspline here is a live axle. There are bearings in the blue plates that are constrained from the outside with button head cap flanges and on the inside with 3d printed spacers. The large axle collar in between the two plates prevents the spline from sliding. The second arm section is rigidly bolted to both the sprocket and the maxspline shaft. There is tiny Zombie-Axle shaft with a gear on it rigged 1:1 with the main shaft to measure the rotation of the shaft directly for more accurate positioning. It doesn\u2019t need a bearing, the shaft just spins with the inside of the encoder!</p>  Main pivot side view.   Bearing retention using button head machine screw flange."},{"location":"mechanism-examples/pivots/6328pivot.html#see-this-pivot-in-action-here","title":"<p> See this Pivot in Action Here </p>","text":"6328 Behind the Bumpers 6328 Rhode Island 2023 Recap"},{"location":"mechanism-examples/shooter/index.html","title":"Shooter Examples","text":""},{"location":"mechanism-examples/shooter/index.html#shooters","title":"Shooters","text":"<p>For all your piece launching needs. Shooter designs vary slightly with different size and shaped pieces, but the general concepts of what makes a \"good\" shooter tend to stay the same.</p> <ul> <li> <p></p> <p>For very small balls, clever packaging and design for a hooded shooter</p> <p> Andrew's Hyperhive Shooter</p> </li> <li> <p></p> <p>For 9.5\" balls, with a rack hood and a limelight mount</p> <p> 1678's Rapid React Shooter</p> </li> </ul> <p></p>"},{"location":"mechanism-examples/shooter/citrus.html","title":"1678's 2022 Shooter","text":""},{"location":"mechanism-examples/shooter/citrus.html#1678s-2022-shooter","title":"1678's 2022 Shooter","text":"Integrated hooded shooter and indexer for simplicity. This design is optimized to shoot large balls as accurately and consistently as possible."},{"location":"mechanism-examples/shooter/citrus.html#links","title":"Links","text":"<p>CAD Link</p>"},{"location":"mechanism-examples/shooter/citrus.html#behind-the-design","title":"Behind the Design","text":"<p>Hooded ball shooters all follow the same fundamental design principles, in an effort to produce the most consistent and accurate shots possible. These can be broken down to the following ideas: </p> <ul> <li>Maximize contact time with the game piece you are shooting. This benefits shot consistency as it gives the gamepiece more time to match the speed of the flywheels. </li> <li>Ensure your shooter can aim with adequate precision.</li> <li>Ensure your flywheels have enough mass to hold a consistent speed throughout the shot.</li> <li>In some cases, spin can be beneficial.</li> </ul> <p>Learn more about the 2022 game: Rapid React</p>  Hooded shooters in 2022 featured backrollers for one main purpose: Controlling backspin. A unique aspect of the 2022 game was the high goal that robots were required to shoot into. The geometry of the goal led many teams to find that their shots bounced out with high backspin. As a remedy, teams added backrollers to their shooters that were geared to spin in the opposite direction as the main flywheel. This reduced backspin on the balls to a manageable amount, but in some cases left just a little bit. This is due to the aerodynamics of spinning balls; thanks to the Magnus effect, backspin on rapid react balls helped them arc better into the high goal, and increased their stability in flight for long distance shots. Hooded shooter flywheels typically use TTB Urethane Wheels or Stealth Wheels. It is important that your flywheels maintain enough mass to hold a constant speed throughout the shot, to ensure consistent shots. Increasing the mass of your flywheel will increase it's moment of inertia, which in turn will increase its consistency. Games in which you can hold and shoot multiple pieces at a time such as Rapid React and Infinite Recharge especially necessitate massed flywheels. The 1678 shooter in 2022 utilized two SDS flywheels for its mass.  The most common method of pivoting a hooded shooter is a rack and pinion. 1678 utilized a 3DP rack integrated with their shooter's \"hood,\" and a smaller gear that \"climbed\" the hood gear. This simple design allows for precise actuation of the hood to a wide range of angles."},{"location":"mechanism-examples/shooter/citrus.html#see-this-shooter-in-action-here","title":"<p> See this Shooter in Action Here </p>","text":"1678 Behind the Bumpers 1678 Match Video"},{"location":"mechanism-examples/shooter/small.html","title":"Andrew's Hyper-Hive Shooter","text":""},{"location":"mechanism-examples/shooter/small.html#andrews-hyperhive-shooter","title":"Andrew's Hyperhive Shooter","text":"Small form factor shooter designed to shoot a high volume of tennis balls at a fast rate. Large overdriven flywheel increases shot consistency when firing large quantities of tennis balls"},{"location":"mechanism-examples/shooter/small.html#links","title":"Links","text":"<p>CAD Link</p>"},{"location":"mechanism-examples/shooter/small.html#behind-the-design","title":"Behind the design","text":"<p>Coming Soon</p> <p></p>"},{"location":"resources/index.html","title":"Resources","text":"<p>This section includes resources that you may find useful to help improve your knowledge of mechanisms, help you understand the rest of the site better, and assist your CAD workflow.</p>"},{"location":"resources/index.html#sections","title":"Sections","text":""},{"location":"resources/index.html#glossary","title":"Glossary","text":"<p>The glossary is a compiled list of words (including acronyms and abbreviations) and definitions to help people understand the lingo used in various parts of the website and on the discord server. When you find one of these words across the site, it will be underlined, and you can hover over it to see the definition.</p>"},{"location":"resources/index.html#mechanism-examples","title":"Mechanism Examples","text":"<p>A library of mechanisms is being continuously compiled in this section. The idea of each page is \"quality over quantity\", so we hope to provide \"Behind the Design\" for each mechanism example added, in order to explain insights into certain design decisions, and how they worked out if the robot ended up being built.</p>"},{"location":"resources/index.html#cad-resources","title":"CAD Resources","text":"<p>A collection of resources to support your workflow in Onshape, relevant to FRC.</p> <p>Featurescripts: A list of FRC-relevant featurescripts and how to add them (includes some short tutorial videos).</p> <p>Simplified Models: A collection of simplified models of COTS parts to reduce load time (see the importance of this in assembly best practices). These are also already mostly added to MKCAD.</p> <p>Configurables: A collection of configurable parts or assemblies that aren't in MKCAD that could assist your design.</p> <p>KrayonCAD: A resource now integrated with MKCAD that allows people to quickly model out robot architectures.</p> <p> </p>"},{"location":"resources/configurables.html","title":"Configurables","text":"<p>Parts in FRC such as printed pulleys can be standardized. Here is a list of common ones:</p> <ul> <li>Configurable HTD5 pulley with insert</li> </ul> <p>More coming soon.</p> <p> </p>"},{"location":"resources/featurescripts.html","title":"Featurescripts","text":"<p>Onshape has its own scripting language to create custom features to automate aspects of design called Featurescript. There are a lot of featurescripts (what we call the custom features) that make designing for FRC much easier.</p>"},{"location":"resources/featurescripts.html#how-to-install-featurescripts","title":"How To Install Featurescripts","text":"<ol> <li>Open any Onshape document and go inside of a part studio</li> <li>Click the rightmost button on the toolbar <ul> <li>Note: If you have previously added any Featurescripts one of those may show up as the right most icon. In that case click the dropdown to show the add button.</li> </ul> </li> <li> <p>Paste the link of the document with the featurescript(s) in it into the search bar</p> <ul> <li>Note: Some of the below featurescripts exist in the same document, so you can add multiple from the same link.</li> </ul> </li> <li> <p>Select the featurescript(s) you want to add to your profile, then exit the box. They will be accessible in all documents from then on in the same drop-down in the toolbar where you added the feature.</p> </li> </ol> Video Tutorial <p> </p> <p>Alternate</p> <p>When viewing a tab in a document that uses custom features, you can click a button near the top left that says 'custom features'. From here you can add custom features used in the document to your profile. This method is used in stage 0 to add Julia's Featurescripts when setting up Onshape.</p>"},{"location":"resources/featurescripts.html#list-of-featurescripts","title":"List of Featurescripts","text":"<p>Tip</p> <p>The title of each featurescript or group of featurescripts links to its respective document. Right click the title and click \"copy link address\" for installing it to your profile using the above process.</p>"},{"location":"resources/featurescripts.html#bundles","title":"Bundles","text":"<p>The below links contain several featurescripts each that you can add all at once. Each useful one will be included separately in the below sections.</p> <p>Julia's Featurescripts</p> <p>Alex's Featurescripts</p> <p>Abhi's Features &amp; Configs</p> <p>2471 Featurescripts</p> <p>TLamp's Featurescripts</p>"},{"location":"resources/featurescripts.html#structure","title":"Structure","text":"<p>Extrude Individual (Julia's Featurescripts)</p> <ul> <li>Can extrude multiple regions as different parts with one feature, even if regions are adjacent</li> <li>Commonly used with tube converter to make punched aluminum tubes from a top view sketch</li> </ul> Video Tutorial <p> </p> <p>Tube Converter (Julia's Featurescripts)</p> <ul> <li>Converts extrusions into punched tube, with customization and presets for hole pattern, wall thickness, and profile.</li> </ul> Video Tutorial <p> </p> <p>Gusset Generator (Julia's Featurescripts)</p> <ul> <li>One of Julia's featurescripts</li> <li>Not recommended due to load time</li> </ul> <p>FilletXpert (Fillet All Edges) (Julia's Featurescripts)</p> <ul> <li>After selecting a face, it adds a fillet to the corners of that face (all edges normal to the selected face)</li> </ul> Video Tutorial <p> </p> <p>Shaft Generator (Julia's Featurescripts)</p> <ul> <li>Generates a shaft, with options for hex, rounded hex (13.75mm OD), MAXSpline, etc.</li> <li>Options for retention type on both ends</li> <li>Can be generated in-place and with offsets</li> </ul> Video Tutorial <p> </p> <p>Spacer Generator (Julia's Featurescripts)</p> <ul> <li>Generates a spacer, with options for round, 3/8\" hex, and 1/2\" hex</li> </ul> Video Tutorial <p> </p> <p>Robot Spacer (Alex's Featurescripts)</p> <ul> <li>A more complex alternative to Julia's spacer generator, if you need more config options</li> </ul> <p>In-Place Bearings (2471 Featurescripts)</p> <ul> <li>Place different types of bearings in place in a part studio</li> </ul> <p>MechSketch (TLamp's Featurescripts)</p> <ul> <li>Incredibly useful, generates sketch profiles for a variety of things</li> <li>Profiles for COTS parts like Maxspline, TTB inserts, maxtube, motors, and the versa patern</li> <li>Profiles and holes for all electronics</li> <li>Profile generator for pulleys and a spur gears</li> </ul>"},{"location":"resources/featurescripts.html#belt-pulleys-chain-sprockets-gears","title":"Belt, Pulleys, Chain, Sprockets, Gears","text":"<p>Contextless Belts (Julia's Featurescripts)</p> <ul> <li>Similar to chain generator, generates a simplified belt given the tooth counts of both sprockets and pitch</li> <li>Either in-place and generates the closest belt, or takes a c-c distance without context and does the same</li> </ul> Video Tutorial <p> </p> <p>Robot Belt (Alex's Featurescripts)</p> <ul> <li>An alternative to contextless belts with an included belt calculator, but can get angry if the c-c distance isn't correct.</li> </ul> <p>Belt &amp; Pulley Generation (2471 Featurescripts)</p> <ul> <li>Incredibly configurable belt and pulley generation</li> <li>Belt width, pulley tooth count, offset and fit adjustment, belt type, etc.</li> <li>Options for bore and flanges for both pulleys</li> </ul> <p>Complex Belt Generator</p> <ul> <li>Generates a complex belt run based off of a sketch with pulley and idler circles</li> </ul> <p>Timing Belt Pulley Generator</p> <ul> <li>Generates GT2 pulleys</li> </ul> <p>Thrifty Insert</p> <ul> <li>Cuts a profile in a part at a given location and depth to fit a thriftybot insert into, for 3D-printed parts to stop them from stripping while being driven on an axle.</li> </ul> <p>Polybelt Generator (2471 Featurescripts)</p> <ul> <li>Generates polycord and pulleys based off of selected points</li> </ul> <p>Chain Generator (Julia's Featurescripts)</p> <ul> <li>Generates a simple chain path and sprockets with given tooth count of both sprockets and pitch</li> <li>Either in-place with points and generates the closest chain length or takes a c-c distance</li> <li>Options for simplified or realistic</li> </ul> Video Tutorial <p> </p> <p>Sprocket (Abhi's Features &amp; Configs)</p> <ul> <li>Generate a sprocket for common types of chain</li> </ul> <p>Spur Gear (Alex's Featurescripts)</p> <ul> <li>Generates a spur gear with a ton of different options</li> <li>Can be useful for 3D-printed parts.</li> </ul>"},{"location":"resources/featurescripts.html#pocketing","title":"Pocketing","text":"<p>Part Lighten (2471 Featurescripts)</p> <ul> <li>Better than \"Lighten\" and more complex than \"Vent\"</li> <li>Better control over ribs, cut depth, fillets, etc.</li> <li>Gives a nice estimate of how much weight is being saved</li> </ul> <p>Vent Featurescript</p> <ul> <li>Used for pocketing and lightening plates</li> <li>Uses sketch regions to determine pocket and rib placement</li> </ul> Video Tutorial <p> </p> <p>Lighten</p> <ul> <li>Less optimized and breaks more then vent.</li> </ul> <p>CheeseIt! (TLamp's Featurescripts)</p> <ul> <li>Advanced lightening pattern generation</li> <li>Isogrid, hexagon, or circle pattern</li> </ul> <p>PatchIt! (TLamp's Featurescripts)</p> <ul> <li>Patches specified pockets in a part</li> </ul>"},{"location":"resources/featurescripts.html#manufacturing","title":"Manufacturing","text":"<p>Auto Layout</p> <ul> <li>Given some derived plates, either transformed from an in-context assembly (to maintain part count) or derived from a part studio, it will automatically lay them out into sheets of a given size, sorted by thickness. This is used to prepare a file to route or waterjet parts out of material with a machine.</li> </ul> <p>Laser Joint</p> <ul> <li>Highly configurable featurescript that generates tab joints between overlapping parts</li> <li>Options to make it easier for cnc routers to cut parts</li> <li>Can use for bumper wood corners</li> </ul> <p>Dogbone and Corner Overcut</p> <ul> <li>Features to make it easier for cnc routers to cut cavities in parts</li> </ul>"},{"location":"resources/featurescripts.html#onshape","title":"Onshape","text":"<p>Origin Cube Featurescript</p> <ul> <li>Used to create an origin reference for assembly mating</li> <li>Optionally import design constants like bolt hole sizes, heat set insert hole sizes, etc</li> <li>See Assembly Best Practices for more information on usage</li> </ul> <p>SuperDerive</p> <ul> <li>Like the normal derive feature, but you can choose where the derived part is placed, duplicate it, perform a boolean operation, and even derive variables.</li> </ul> <p>Assembly Mirror</p> <ul> <li>Adds reflected mate connectors to a part so you can easily mate it reflected across a plane in an assembly (does not mirror geometry).</li> </ul> <p>Part Color</p> <ul> <li>Give color to faces on a part retroactively</li> <li>Can use a variety of different color inputs</li> <li>Can be used for part color configurations</li> </ul> <p>Set Materials (Abhi's Features &amp; Configs)</p> <ul> <li>Parametrically set materials and appearances of parts in batches</li> </ul> <p>Set Properties (Abhi's Features &amp; Configs)</p> <ul> <li>Sets properties of parts in batches</li> </ul> <p>2471's Part Numbering (2471 Featurescripts)</p> <ul> <li>Numbers parts based off of a given standard</li> </ul> <p>Abhi's Part Numbering</p> <ul> <li>Used for quickly applying a system to number parts</li> </ul> <p>3D Printed Mass (Julia's Featurescripts)</p> <ul> <li>Modifies 3D-printed parts to have accurate mass with given material, infill, and wall thickness</li> </ul> Video Tutorial <p> </p> <p>Advanced Variables (2471 Featurescripts)</p> <ul> <li>Can create a compound variable with path length, angle between edges, distance between planes, angle between planes, distance between points, pulley center distance, and chain center distance</li> <li>Very useful for complex belt and chain runs</li> <li>Include measurements that Onshape can't normally do</li> </ul>"},{"location":"resources/featurescripts.html#troubleshooting","title":"Troubleshooting","text":"<p>If a featurescript is not working as expected, the current version might be broken. You might have to update the featurescript. If it needs updating, the feature will show a blue icon to the right of it that, when hovered over, will say \"change version of linked document.\"</p> <ol> <li>The first way to update it is by individually by right clicking the feature you want updated in the feature list and clicking \"Update linked document...\"</li> <li>The second, and slightly more permanent way (until the maintainer of the custom feature creates a new version), is by right clicking any of the featurescript icons in your toolbar or in the custom features dropdown and clicking \"Update...\" or \"Update all...\" From there, you can see the current versions of the custom features you have added to your profile and update selected ones to use the current latest version when you use a featurescript.</li> </ol> Video Tutorial <p> </p> <p> </p>"},{"location":"resources/glossary.html","title":"Welcome to the Glossary","text":""},{"location":"resources/glossary.html#why-this-exists","title":"Why this exists.","text":"<p>We know it can be hard learning each and every term thrown around in FRC design, so we have compiled a list of words and definitions to aide you throughout your learning.</p>"},{"location":"resources/glossary.html#terms","title":"Terms","text":"<code>c-c</code> \"Center to Center\" distance <code>WCP</code> \"West Coast Products\" <code>TTB</code> \"The Thrifty Bot\" <code>SDS</code> \"Swerve Drive Specialties\" <code>Turnbuckle</code> A threaded part that goes in between chain links to tension the chain <code>COG</code> Center of Gravity, also referred to as COM(Center of Mass) <code>OTB</code> \"Over the Bumper\" typically used to refer to a style of intake where you lift the piece over the bumper <code>UTB</code> \"Under the Bumper\" typically used to refer to a style of intake where you move the piece under the bumper <code>V4B</code> \"Virtual 4 Bar\" is where a second degree of freedom is directly geared of a previous degree of freedom instead of being moved independently or by a linkage. <code>4Bar</code> A type of linkage characterized by its 4 pivot points <code>COTS</code> \"Commercial Off the Shelf\" parts are anything you can buy from a vendor. <code>Dead Axle</code> A type of axle setup where the axle is fixed in place and or is not transferring the torque of the system through it. <code>Live Axle</code> A type of axle setup where the main torque transfer is through the axle <code>Zombie Axle</code> Typically used on pivots a zombie axle spins with the mechanism, but is transferring little to no torque through it. This is commonly used to put an encoder on the pivot point. <code>Tube Nut</code> Also known as a \"Star Nut\", these provide an easy way to put a thread in end of a hollow tube allowing you to bolt the tube to another part.  <code>Cantilever</code> Horizontal Element that's supported by one side only. <code>Shear</code> When forces are applied parallel to the plane of a material, causing breaking of fasteners due to excessive force and stress. <code>Torque</code> Force that produces rotational movement. <code>Moment of Inertia</code> Amount of resistance against angular acceleration. <code>End Effector</code> Mechanism attached to the end of an arm. <code>Linear Actuator</code> Device that converts rotational movement to linear motion, usually with a lead screw. <code>PDH</code> Power Distribution Hub. <code>SparkMAX</code> Motor controller for REV motors. <code>Main Breaker</code> Switch for the robot. <code>PWM</code> Pulse Width Modulation cable. <code>RIO</code> RoboRIO, brain of the robot. <code>Blinkn</code> LED controller for REV. <code>Radio</code> Device that helps the robot communicate with the driver station. <code>Limit Switch</code> Type of sensor that acts as a soft limit when physically or magnetically hit. <code>Throughbore Encoder</code> An encoder that allows shafts to pass through its center to record position.  <code>Magnetic Encoder</code> An encoder that uses magnetic fields to measure position or motion.  <code>3DP</code> Abbreviation for 3D printed or 3D printing. <code>Billet</code> Component machined down from a solid block of material. <code>Bevel Gear</code> Special gears that change the axis of rotation, typically by 90 degrees. <code>Gusset</code> Reinforcement plate, usually made of aluminum, used to strengthen connections between two tubes. <code>Box Tube</code> Hollow, square or rectangular metal tubing. <code>Tie Rod</code> Rigid bar used for structural support and stability, often in the frame of a robot. <code>Poly/PC</code> Abbreviation for polycarbonate. <code>Stripping</code> Process of removing threads or bolt heads, often due to excessive force or wear. <code>Cross Threading</code> Damage caused when a fastener is forced at an incorrect angle during assembly. <code>Tapping</code> The process of creating threads in a hole using a tap tool. <code>Brainpan</code> Flipped electronics bellypan. <code>Bellypan</code> Plate for mounting electronics on the underside of your drivebase. <code>Hardstop</code> A physical limit designed to prevent a mechanism or component from moving beyond a certain point. <code>Softstop</code> A software-based limit or control mechanism that restricts the movement of a mechanism or component to prevent it from exceeding certain parameters. <code>DP</code> Diametral pitch is the number of teeth per inch of the pitch circle. <code>packaging</code> The way in which you fit parts of your robot together in a space <code>backlash</code> 'Slop' in a power transmission system; can wiggle back and forth without engaging the whole system <code>parametric</code> Designed in a way that uses relationships between steps to maintain design intent"},{"location":"resources/krayonCAD.html","title":"KrayonCAD","text":""},{"location":"resources/krayonCAD.html#what-is-krayoncad","title":"What is KrayonCAD?","text":"<p>KrayonCAD is a collection of simplified, configurable Onshape assemblies for the most common FRC subsystems. These subsystems can be modified by changing just a few variables, allowing you to piece together a robot concept extremely quickly and efficiently. KrayonCAD Assemblies only contain the necessary parts to communicate design intent, while minimizing detail and part count to ensure quick load times.</p> <p></p>"},{"location":"resources/krayonCAD.html#why-should-i-use-krayoncad","title":"Why should I use KrayonCAD?","text":"<p>After brainstorming ideas for a new game, the first CAD iteration is sometimes a heavily simplified design, commonly referred to as \u201cCrayola CAD.\u201d This workflow is used by many teams, including team 254. This is where KrayonCAD comes in; using a library of configurable subsystems, KrayonCAD allows you to:</p> <ul> <li>Investigate robot architectures</li> <li>Budget space</li> <li>Verify geometries for robot designs</li> <li>Further flesh out robot designs to scale and in 3D</li> </ul> <p>KrayonCAD is fast! You can go from an idea in your head or a sketch to a 3D model in minutes!</p>"},{"location":"resources/krayonCAD.html#how-do-i-use-krayoncad","title":"How do I use KrayonCAD?","text":"<p>KrayonCAD is a simple as 1, 2, 3:</p> <ol> <li> <p>Insert: From any Onshape assembly, use the MKCAD app to insert a KrayonCAD Assembly. You can configure the Assembly before inserting.</p> <p></p> </li> <li> <p>Configure: Right click a KrayonCAD Assembly in the parts list &gt; Configure &gt; change dimensions, check or uncheck boxes, and choose options from drop down lists to configure the assembly to your liking.</p> <p></p> </li> <li> <p>Mate: KrayonCAD Assemblies have mate connectors placed in strategic places to allow for easy mating using the Fasten and Revolute mate types.</p> <p></p> </li> </ol>"},{"location":"resources/krayonCAD.html#credit","title":"Credit","text":"<p>Link to original ChiefDelphi release and contributors</p> <p> </p>"},{"location":"resources/simplified.html","title":"Simplified Models","text":"<p>To reduce load time and simplify geometry, simplified models are used in FRC. Electrical simplified models are included in the MKCad library, so they will not be included here.</p>"},{"location":"resources/simplified.html#swerve","title":"Swerve","text":"<p>SDS MK4</p> <p>SDS MK4i</p> <p>SDS MK4N</p> <p>MAXSwerve</p> <p>SwerveX (Credit Astro from 6423)</p>"},{"location":"resources/simplified.html#gearboxes","title":"Gearboxes","text":"<p>MAXPlanetary</p> <p>VersaPlanetary</p> <p>UltraPlanetary</p>"},{"location":"resources/simplified.html#motors","title":"Motors","text":"<p>Motors</p>"},{"location":"resources/simplified.html#electrical","title":"Electrical","text":"<p>PDH</p> <p> </p>"},{"location":"resources/strategicDesignResources.html","title":"Strategic Design Resources","text":"<p>WIP</p> <p> </p>"}]}